{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///angular-extend-promises.min.js","webpack:///webpack/bootstrap 2861765e0f0158c719e0","webpack:///./src/index.js","webpack:///./src/globals.js","webpack:///./src/_.js","webpack:///./tmp/lodash.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/newq/index.js","webpack:///./src/newq/errors.js","webpack:///./src/newq/all.js","webpack:///./src/promise/decorate.js","webpack:///./src/promise/callNewQ.js","webpack:///./src/promise/bindMethods.js","webpack:///./src/defineProperty.js","webpack:///./src/promise/bind.js","webpack:///./src/promise/call.js","webpack:///./src/promise/catch.js","webpack:///./src/promise/delay.js","webpack:///./src/promise/done.js","webpack:///./src/promise/get.js","webpack:///./src/promise/nodeify.js","webpack:///./src/promise/return.js","webpack:///./src/promise/spread.js","webpack:///./src/promise/tap.js","webpack:///./src/promise/then.js","webpack:///./src/promise/throw.js","webpack:///./src/promise/timeout.js","webpack:///./src/newq/any.js","webpack:///./src/newq/bind.js","webpack:///./src/newq/defer.js","webpack:///./src/newq/each.js","webpack:///./src/newq/walkCollection.js","webpack:///./src/newq/gate.js","webpack:///./src/newq/filter.js","webpack:///./src/newq/map.js","webpack:///./src/newq/join.js","webpack:///./src/newq/method.js","webpack:///./src/newq/try.js","webpack:///./src/newq/props.js","webpack:///./src/newq/reduce.js","webpack:///./src/newq/reject.js","webpack:///./src/newq/autoDecorate.js","webpack:///./src/newq/resolve.js","webpack:///./src/newq/some.js","webpack:///./src/newq/when.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","angular","provider","options","compatibilityAliases","disableES5Methods","$get","config","$provide","mock","key","decorator","$delegate","angularExtendPromises","globals","$options","_","extend","$defer","noop","e","__WEBPACK_AMD_DEFINE_RESULT__","global","addMapEntry","map","pair","set","addSetEntry","value","add","apply","func","thisArg","args","length","arrayEach","array","iteratee","index","arrayFilter","predicate","resIndex","result","arrayMap","Array","arrayPush","values","offset","arrayReduce","accumulator","initAccum","arraySome","asciiToArray","string","split","baseProperty","object","undefined","baseReduce","collection","eachFunc","baseTimes","n","baseUnary","baseValues","props","cacheHas","cache","has","getValue","hasUnicode","reHasUnicode","test","iteratorToArray","iterator","data","next","done","push","mapToArray","size","forEach","overArg","transform","arg","setToArray","stringToArray","unicodeToArray","match","reUnicode","lodash","Hash","entries","clear","entry","hashClear","__data__","nativeCreate","hashDelete","hashGet","HASH_UNDEFINED","hasOwnProperty","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","lastIndex","pop","splice","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","Map","mapCacheDelete","getMapData","mapCacheGet","get","mapCacheHas","mapCacheSet","SetCache","setCacheAdd","setCacheHas","Stack","stackClear","stackDelete","stackGet","stackHas","stackSet","pairs","LARGE_ARRAY_SIZE","arrayLikeKeys","inherited","isArr","isArray","isArg","isArguments","isBuff","isBuffer","isType","isTypedArray","skipIndexes","String","isIndex","assignInDefaults","objValue","srcValue","eq","objectProto","assignValue","baseAssignValue","baseAssign","source","copyObject","keys","baseAssignIn","keysIn","defineProperty","configurable","enumerable","writable","baseClone","bitmask","customizer","stack","isDeep","CLONE_DEEP_FLAG","isFlat","CLONE_FLAT_FLAG","isFull","CLONE_SYMBOLS_FLAG","isObject","initCloneArray","copyArray","tag","getTag","isFunc","funcTag","genTag","cloneBuffer","objectTag","argsTag","initCloneObject","copySymbolsIn","copySymbols","cloneableTags","initCloneByTag","stacked","keysFunc","getAllKeysIn","getAllKeys","subValue","baseFilter","baseEach","baseFlatten","depth","isStrict","isFlattenable","baseForOwn","baseFor","baseFunctions","isFunction","baseGet","path","castPath","toKey","baseGetAllKeys","symbolsFunc","baseGetTag","undefinedTag","nullTag","Object","symToStringTag","getRawTag","objectToString","baseHasIn","baseIsArguments","isObjectLike","baseIsEqual","other","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","arrayTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","equalByTag","COMPARE_PARTIAL_FLAG","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","baseIsMatch","matchData","noCustomizer","COMPARE_UNORDERED_FLAG","baseIsNative","isMasked","pattern","reIsNative","reIsHostCtor","toSource","baseIsTypedArray","isLength","typedArrayTags","baseIteratee","identity","baseMatchesProperty","baseMatches","property","baseKeys","isPrototype","nativeKeys","baseKeysIn","nativeKeysIn","isProto","baseMap","isArrayLike","getMatchData","matchesStrictComparable","isKey","isStrictComparable","hasIn","basePick","paths","basePickBy","baseSet","basePropertyDeep","baseRest","start","setToString","overRest","nested","newValue","baseToString","isSymbol","symbolToString","INFINITY","baseZipObject","assignFunc","valsLength","stringToPath","toString","buffer","slice","allocUnsafe","constructor","copy","cloneArrayBuffer","arrayBuffer","byteLength","Uint8Array","cloneDataView","dataView","byteOffset","cloneMap","cloneFunc","cloneRegExp","regexp","reFlags","exec","cloneSet","cloneSymbol","symbol","symbolValueOf","cloneTypedArray","typedArray","isNew","getSymbols","getSymbolsIn","createAssigner","assigner","sources","guard","isIterateeCall","createBaseEach","fromRight","iterable","createBaseFor","isPartial","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","dataViewTag","arrayBufferTag","boolTag","dateTag","numberTag","errorTag","name","message","regexpTag","stringTag","mapTag","convert","setTag","symbolTag","objProps","objLength","othProps","skipCtor","objCtor","othCtor","flatRest","flatten","getIteratee","arguments","isKeyable","getNative","isOwn","unmasked","nativeObjectToString","hasPath","hasFunc","input","baseCreate","getPrototype","Ctor","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","spreadableSymbol","MAX_SAFE_INTEGER","reIsUint","type","reIsPlainProp","reIsDeepProp","maskSrcKey","proto","prototype","memoizeCapped","memoize","MAX_MEMOIZE_SIZE","nativeMax","otherArgs","shortOut","count","lastCalled","stamp","nativeNow","remaining","HOT_SPAN","HOT_COUNT","funcToString","zipObject","filter","reduce","resolver","TypeError","FUNC_ERROR_TEXT","memoized","Cache","isEmpty","asyncTag","proxyTag","isString","toArray","symIterator","functionsIn","defaultValue","constant","stubArray","stubFalse","VERSION","promiseTag","weakMapTag","reLeadingDot","rePropName","reRegExpChar","reEscapeChar","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ","reOptMod","rsOptVar","rsOptJoin","join","rsSeq","rsSymbol","RegExp","freeGlobal","freeSelf","self","Function","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","arrayProto","funcProto","coreJsData","uid","IE_PROTO","replace","Buffer","Symbol","getPrototypeOf","objectCreate","create","propertyIsEnumerable","isConcatSpreadable","toStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","Math","max","Date","now","DataView","Promise","Set","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","valueOf","baseSetToString","ArrayBuffer","resolve","ctorString","number","quote","assignIn","assignInWith","srcIndex","defaults","pick","extendWith","each","webpackPolyfill","deprecate","children","errors","newq","Error","deferred","defer","reject","promise","all","any","bind","method","some","when","AggregateError","TimeoutError","attempt","try","NewQError","captureStackTrace","subError","SubError","Parent","F","SubSubError","decorate","promises","$qPromise","parent","$$state","$$boundTo","then","callNewQ","aliases","catch","finally","return","throw","delay","$$finally","nodeify","spread","tap","timeout","$$arrayListeners","listener","targets","target","bindMethods","newQ","execute","arr","res","concat","$$unsynced","val","$$promiseResult","$$callArrayListeners","obj","bound","shift","checkErrorsAndPredicates","errorsAndPredicates","err","callback","$$catch","ms","def","setTimeout","prop","cb","a","fn","returns","$$then","msg","to","clearTimeout","oThis","walkCollection","Gate","promiseFn","gate","concurrency","i","maxQueue","$fns","$fn","indexOf","toFilter","vals","initialValue","acc","autoDecorate","rejectedCount","elt"],"mappings":"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","file":"angular-extend-promises.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-extend-promises\"] = factory();\n\telse\n\t\troot[\"angular-extend-promises\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * angular-extend-promises v1.0.0-rc.4 - 2016-12-15\n * (c) 2014-2016 L.systems SARL, Etienne Folio, Quentin Raynaud\n * https://bitbucket.org/lsystems/angular-extend-promises\n * License: MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-extend-promises\"] = factory();\n\telse\n\t\troot[\"angular-extend-promises\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tangular.module('angular-extend-promises', [])\n\t\n\t  .provider('angularExtendPromises', function() {\n\t    this.options = {\n\t      compatibilityAliases: true,\n\t      disableES5Methods: false\n\t    };\n\t\n\t    this.$get = function() {\n\t      return this.options;\n\t    };\n\t  })\n\t\n\t  .config(['$provide', function($provide) {\n\t    // In test mode, empty the cache before doing anything else\n\t    if (angular.mock) {\n\t      for (var key in __webpack_require__.c) {\n\t        delete __webpack_require__.c[key];\n\t      }\n\t    }\n\t\n\t    $provide.decorator('$q', ['$delegate', 'angularExtendPromises', function($delegate, angularExtendPromises) {\n\t      var globals = __webpack_require__(1);\n\t\n\t      globals.$delegate = $delegate;\n\t      globals.$options = angularExtendPromises;\n\t\n\t      return __webpack_require__(5);\n\t    }]);\n\t  }])\n\t\n\t;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\t\n\t_.extend(module.exports, {\n\t  $defer: _.noop(),\n\t  $delegate: {},\n\t  $options: {}\n\t});\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* global _ */\n\t\n\ttry {\n\t  module.exports = __webpack_require__(3);\n\t}\n\tcatch (e) {\n\t  module.exports = _;\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**\n\t * @license\n\t * Lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash include=\"constant,defaults,each,extend,filter,isArray,isEmpty,isFunction,isArguments,keys,map,functionsIn,noop,zipObject,pick,reduce,toArray,values\" -o tmp/lodash.js`\n\t * Copyright JS Foundation and other contributors <https://js.foundation/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t;(function() {\n\t\n\t  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n\t  var undefined;\n\t\n\t  /** Used as the semantic version number. */\n\t  var VERSION = '4.17.1';\n\t\n\t  /** Used as the size to enable large array optimizations. */\n\t  var LARGE_ARRAY_SIZE = 200;\n\t\n\t  /** Error message constants. */\n\t  var FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t  /** Used to stand-in for `undefined` hash values. */\n\t  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\t\n\t  /** Used as the maximum memoize cache size. */\n\t  var MAX_MEMOIZE_SIZE = 500;\n\t\n\t  /** Used to compose bitmasks for cloning. */\n\t  var CLONE_DEEP_FLAG = 1,\n\t      CLONE_FLAT_FLAG = 2,\n\t      CLONE_SYMBOLS_FLAG = 4;\n\t\n\t  /** Used to compose bitmasks for value comparisons. */\n\t  var COMPARE_PARTIAL_FLAG = 1,\n\t      COMPARE_UNORDERED_FLAG = 2;\n\t\n\t  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n\t  var HOT_COUNT = 800,\n\t      HOT_SPAN = 16;\n\t\n\t  /** Used as references for various `Number` constants. */\n\t  var INFINITY = 1 / 0,\n\t      MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t  /** `Object#toString` result references. */\n\t  var argsTag = '[object Arguments]',\n\t      arrayTag = '[object Array]',\n\t      asyncTag = '[object AsyncFunction]',\n\t      boolTag = '[object Boolean]',\n\t      dateTag = '[object Date]',\n\t      errorTag = '[object Error]',\n\t      funcTag = '[object Function]',\n\t      genTag = '[object GeneratorFunction]',\n\t      mapTag = '[object Map]',\n\t      numberTag = '[object Number]',\n\t      nullTag = '[object Null]',\n\t      objectTag = '[object Object]',\n\t      promiseTag = '[object Promise]',\n\t      proxyTag = '[object Proxy]',\n\t      regexpTag = '[object RegExp]',\n\t      setTag = '[object Set]',\n\t      stringTag = '[object String]',\n\t      symbolTag = '[object Symbol]',\n\t      undefinedTag = '[object Undefined]',\n\t      weakMapTag = '[object WeakMap]';\n\t\n\t  var arrayBufferTag = '[object ArrayBuffer]',\n\t      dataViewTag = '[object DataView]',\n\t      float32Tag = '[object Float32Array]',\n\t      float64Tag = '[object Float64Array]',\n\t      int8Tag = '[object Int8Array]',\n\t      int16Tag = '[object Int16Array]',\n\t      int32Tag = '[object Int32Array]',\n\t      uint8Tag = '[object Uint8Array]',\n\t      uint8ClampedTag = '[object Uint8ClampedArray]',\n\t      uint16Tag = '[object Uint16Array]',\n\t      uint32Tag = '[object Uint32Array]';\n\t\n\t  /** Used to match property names within property paths. */\n\t  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n\t      reIsPlainProp = /^\\w*$/,\n\t      reLeadingDot = /^\\./,\n\t      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\t\n\t  /**\n\t   * Used to match `RegExp`\n\t   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t   */\n\t  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\t\n\t  /** Used to match backslashes in property paths. */\n\t  var reEscapeChar = /\\\\(\\\\)?/g;\n\t\n\t  /** Used to match `RegExp` flags from their coerced string values. */\n\t  var reFlags = /\\w*$/;\n\t\n\t  /** Used to detect host constructors (Safari). */\n\t  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\t\n\t  /** Used to detect unsigned integer values. */\n\t  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\t\n\t  /** Used to compose unicode character classes. */\n\t  var rsAstralRange = '\\\\ud800-\\\\udfff',\n\t      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n\t      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n\t      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n\t      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n\t      rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\t\n\t  /** Used to compose unicode capture groups. */\n\t  var rsAstral = '[' + rsAstralRange + ']',\n\t      rsCombo = '[' + rsComboRange + ']',\n\t      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n\t      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n\t      rsNonAstral = '[^' + rsAstralRange + ']',\n\t      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n\t      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n\t      rsZWJ = '\\\\u200d';\n\t\n\t  /** Used to compose unicode regexes. */\n\t  var reOptMod = rsModifier + '?',\n\t      rsOptVar = '[' + rsVarRange + ']?',\n\t      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n\t      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n\t      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\t\n\t  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\t  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\t\n\t  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\t  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\t\n\t  /** Used to identify `toStringTag` values of typed arrays. */\n\t  var typedArrayTags = {};\n\t  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n\t  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n\t  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n\t  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n\t  typedArrayTags[uint32Tag] = true;\n\t  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n\t  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n\t  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n\t  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n\t  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n\t  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n\t  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n\t  typedArrayTags[weakMapTag] = false;\n\t\n\t  /** Used to identify `toStringTag` values supported by `_.clone`. */\n\t  var cloneableTags = {};\n\t  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n\t  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n\t  cloneableTags[boolTag] = cloneableTags[dateTag] =\n\t  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n\t  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n\t  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n\t  cloneableTags[numberTag] = cloneableTags[objectTag] =\n\t  cloneableTags[regexpTag] = cloneableTags[setTag] =\n\t  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n\t  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n\t  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n\t  cloneableTags[errorTag] = cloneableTags[funcTag] =\n\t  cloneableTags[weakMapTag] = false;\n\t\n\t  /** Detect free variable `global` from Node.js. */\n\t  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\t\n\t  /** Detect free variable `self`. */\n\t  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\t\n\t  /** Used as a reference to the global object. */\n\t  var root = freeGlobal || freeSelf || Function('return this')();\n\t\n\t  /** Detect free variable `exports`. */\n\t  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\t\n\t  /** Detect free variable `module`. */\n\t  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\t\n\t  /** Detect the popular CommonJS extension `module.exports`. */\n\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n\t\n\t  /** Detect free variable `process` from Node.js. */\n\t  var freeProcess = moduleExports && freeGlobal.process;\n\t\n\t  /** Used to access faster Node.js helpers. */\n\t  var nodeUtil = (function() {\n\t    try {\n\t      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n\t    } catch (e) {}\n\t  }());\n\t\n\t  /* Node.js helper references. */\n\t  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\t\n\t  /*--------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Adds the key-value `pair` to `map`.\n\t   *\n\t   * @private\n\t   * @param {Object} map The map to modify.\n\t   * @param {Array} pair The key-value pair to add.\n\t   * @returns {Object} Returns `map`.\n\t   */\n\t  function addMapEntry(map, pair) {\n\t    // Don't return `map.set` because it's not chainable in IE 11.\n\t    map.set(pair[0], pair[1]);\n\t    return map;\n\t  }\n\t\n\t  /**\n\t   * Adds `value` to `set`.\n\t   *\n\t   * @private\n\t   * @param {Object} set The set to modify.\n\t   * @param {*} value The value to add.\n\t   * @returns {Object} Returns `set`.\n\t   */\n\t  function addSetEntry(set, value) {\n\t    // Don't return `set.add` because it's not chainable in IE 11.\n\t    set.add(value);\n\t    return set;\n\t  }\n\t\n\t  /**\n\t   * A faster alternative to `Function#apply`, this function invokes `func`\n\t   * with the `this` binding of `thisArg` and the arguments of `args`.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to invoke.\n\t   * @param {*} thisArg The `this` binding of `func`.\n\t   * @param {Array} args The arguments to invoke `func` with.\n\t   * @returns {*} Returns the result of `func`.\n\t   */\n\t  function apply(func, thisArg, args) {\n\t    switch (args.length) {\n\t      case 0: return func.call(thisArg);\n\t      case 1: return func.call(thisArg, args[0]);\n\t      case 2: return func.call(thisArg, args[0], args[1]);\n\t      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n\t    }\n\t    return func.apply(thisArg, args);\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.forEach` for arrays without support for\n\t   * iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array} Returns `array`.\n\t   */\n\t  function arrayEach(array, iteratee) {\n\t    var index = -1,\n\t        length = array == null ? 0 : array.length;\n\t\n\t    while (++index < length) {\n\t      if (iteratee(array[index], index, array) === false) {\n\t        break;\n\t      }\n\t    }\n\t    return array;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.filter` for arrays without support for\n\t   * iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to iterate over.\n\t   * @param {Function} predicate The function invoked per iteration.\n\t   * @returns {Array} Returns the new filtered array.\n\t   */\n\t  function arrayFilter(array, predicate) {\n\t    var index = -1,\n\t        length = array == null ? 0 : array.length,\n\t        resIndex = 0,\n\t        result = [];\n\t\n\t    while (++index < length) {\n\t      var value = array[index];\n\t      if (predicate(value, index, array)) {\n\t        result[resIndex++] = value;\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.map` for arrays without support for iteratee\n\t   * shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array} Returns the new mapped array.\n\t   */\n\t  function arrayMap(array, iteratee) {\n\t    var index = -1,\n\t        length = array == null ? 0 : array.length,\n\t        result = Array(length);\n\t\n\t    while (++index < length) {\n\t      result[index] = iteratee(array[index], index, array);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Appends the elements of `values` to `array`.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to modify.\n\t   * @param {Array} values The values to append.\n\t   * @returns {Array} Returns `array`.\n\t   */\n\t  function arrayPush(array, values) {\n\t    var index = -1,\n\t        length = values.length,\n\t        offset = array.length;\n\t\n\t    while (++index < length) {\n\t      array[offset + index] = values[index];\n\t    }\n\t    return array;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.reduce` for arrays without support for\n\t   * iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @param {*} [accumulator] The initial value.\n\t   * @param {boolean} [initAccum] Specify using the first element of `array` as\n\t   *  the initial value.\n\t   * @returns {*} Returns the accumulated value.\n\t   */\n\t  function arrayReduce(array, iteratee, accumulator, initAccum) {\n\t    var index = -1,\n\t        length = array == null ? 0 : array.length;\n\t\n\t    if (initAccum && length) {\n\t      accumulator = array[++index];\n\t    }\n\t    while (++index < length) {\n\t      accumulator = iteratee(accumulator, array[index], index, array);\n\t    }\n\t    return accumulator;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.some` for arrays without support for iteratee\n\t   * shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array} [array] The array to iterate over.\n\t   * @param {Function} predicate The function invoked per iteration.\n\t   * @returns {boolean} Returns `true` if any element passes the predicate check,\n\t   *  else `false`.\n\t   */\n\t  function arraySome(array, predicate) {\n\t    var index = -1,\n\t        length = array == null ? 0 : array.length;\n\t\n\t    while (++index < length) {\n\t      if (predicate(array[index], index, array)) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\t\n\t  /**\n\t   * Converts an ASCII `string` to an array.\n\t   *\n\t   * @private\n\t   * @param {string} string The string to convert.\n\t   * @returns {Array} Returns the converted array.\n\t   */\n\t  function asciiToArray(string) {\n\t    return string.split('');\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.property` without support for deep paths.\n\t   *\n\t   * @private\n\t   * @param {string} key The key of the property to get.\n\t   * @returns {Function} Returns the new accessor function.\n\t   */\n\t  function baseProperty(key) {\n\t    return function(object) {\n\t      return object == null ? undefined : object[key];\n\t    };\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n\t   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n\t   *\n\t   * @private\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @param {*} accumulator The initial value.\n\t   * @param {boolean} initAccum Specify using the first or last element of\n\t   *  `collection` as the initial value.\n\t   * @param {Function} eachFunc The function to iterate over `collection`.\n\t   * @returns {*} Returns the accumulated value.\n\t   */\n\t  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n\t    eachFunc(collection, function(value, index, collection) {\n\t      accumulator = initAccum\n\t        ? (initAccum = false, value)\n\t        : iteratee(accumulator, value, index, collection);\n\t    });\n\t    return accumulator;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.times` without support for iteratee shorthands\n\t   * or max array length checks.\n\t   *\n\t   * @private\n\t   * @param {number} n The number of times to invoke `iteratee`.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array} Returns the array of results.\n\t   */\n\t  function baseTimes(n, iteratee) {\n\t    var index = -1,\n\t        result = Array(n);\n\t\n\t    while (++index < n) {\n\t      result[index] = iteratee(index);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.unary` without support for storing metadata.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to cap arguments for.\n\t   * @returns {Function} Returns the new capped function.\n\t   */\n\t  function baseUnary(func) {\n\t    return function(value) {\n\t      return func(value);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.values` and `_.valuesIn` which creates an\n\t   * array of `object` property values corresponding to the property names\n\t   * of `props`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {Array} props The property names to get values for.\n\t   * @returns {Object} Returns the array of property values.\n\t   */\n\t  function baseValues(object, props) {\n\t    return arrayMap(props, function(key) {\n\t      return object[key];\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Checks if a `cache` value for `key` exists.\n\t   *\n\t   * @private\n\t   * @param {Object} cache The cache to query.\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function cacheHas(cache, key) {\n\t    return cache.has(key);\n\t  }\n\t\n\t  /**\n\t   * Gets the value at `key` of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} [object] The object to query.\n\t   * @param {string} key The key of the property to get.\n\t   * @returns {*} Returns the property value.\n\t   */\n\t  function getValue(object, key) {\n\t    return object == null ? undefined : object[key];\n\t  }\n\t\n\t  /**\n\t   * Checks if `string` contains Unicode symbols.\n\t   *\n\t   * @private\n\t   * @param {string} string The string to inspect.\n\t   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n\t   */\n\t  function hasUnicode(string) {\n\t    return reHasUnicode.test(string);\n\t  }\n\t\n\t  /**\n\t   * Converts `iterator` to an array.\n\t   *\n\t   * @private\n\t   * @param {Object} iterator The iterator to convert.\n\t   * @returns {Array} Returns the converted array.\n\t   */\n\t  function iteratorToArray(iterator) {\n\t    var data,\n\t        result = [];\n\t\n\t    while (!(data = iterator.next()).done) {\n\t      result.push(data.value);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Converts `map` to its key-value pairs.\n\t   *\n\t   * @private\n\t   * @param {Object} map The map to convert.\n\t   * @returns {Array} Returns the key-value pairs.\n\t   */\n\t  function mapToArray(map) {\n\t    var index = -1,\n\t        result = Array(map.size);\n\t\n\t    map.forEach(function(value, key) {\n\t      result[++index] = [key, value];\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Creates a unary function that invokes `func` with its argument transformed.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to wrap.\n\t   * @param {Function} transform The argument transform.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function overArg(func, transform) {\n\t    return function(arg) {\n\t      return func(transform(arg));\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Converts `set` to an array of its values.\n\t   *\n\t   * @private\n\t   * @param {Object} set The set to convert.\n\t   * @returns {Array} Returns the values.\n\t   */\n\t  function setToArray(set) {\n\t    var index = -1,\n\t        result = Array(set.size);\n\t\n\t    set.forEach(function(value) {\n\t      result[++index] = value;\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Converts `string` to an array.\n\t   *\n\t   * @private\n\t   * @param {string} string The string to convert.\n\t   * @returns {Array} Returns the converted array.\n\t   */\n\t  function stringToArray(string) {\n\t    return hasUnicode(string)\n\t      ? unicodeToArray(string)\n\t      : asciiToArray(string);\n\t  }\n\t\n\t  /**\n\t   * Converts a Unicode `string` to an array.\n\t   *\n\t   * @private\n\t   * @param {string} string The string to convert.\n\t   * @returns {Array} Returns the converted array.\n\t   */\n\t  function unicodeToArray(string) {\n\t    return string.match(reUnicode) || [];\n\t  }\n\t\n\t  /*--------------------------------------------------------------------------*/\n\t\n\t  /** Used for built-in method references. */\n\t  var arrayProto = Array.prototype,\n\t      funcProto = Function.prototype,\n\t      objectProto = Object.prototype;\n\t\n\t  /** Used to detect overreaching core-js shims. */\n\t  var coreJsData = root['__core-js_shared__'];\n\t\n\t  /** Used to resolve the decompiled source of functions. */\n\t  var funcToString = funcProto.toString;\n\t\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t  /** Used to detect methods masquerading as native. */\n\t  var maskSrcKey = (function() {\n\t    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n\t    return uid ? ('Symbol(src)_1.' + uid) : '';\n\t  }());\n\t\n\t  /**\n\t   * Used to resolve the\n\t   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t   * of values.\n\t   */\n\t  var nativeObjectToString = objectProto.toString;\n\t\n\t  /** Used to detect if a method is native. */\n\t  var reIsNative = RegExp('^' +\n\t    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n\t    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t  );\n\t\n\t  /** Built-in value references. */\n\t  var Buffer = moduleExports ? root.Buffer : undefined,\n\t      Symbol = root.Symbol,\n\t      Uint8Array = root.Uint8Array,\n\t      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n\t      getPrototype = overArg(Object.getPrototypeOf, Object),\n\t      objectCreate = Object.create,\n\t      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n\t      splice = arrayProto.splice,\n\t      spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n\t      symIterator = Symbol ? Symbol.iterator : undefined,\n\t      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\t\n\t  var defineProperty = (function() {\n\t    try {\n\t      var func = getNative(Object, 'defineProperty');\n\t      func({}, '', {});\n\t      return func;\n\t    } catch (e) {}\n\t  }());\n\t\n\t  /* Built-in method references for those with the same name as other `lodash` methods. */\n\t  var nativeGetSymbols = Object.getOwnPropertySymbols,\n\t      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n\t      nativeKeys = overArg(Object.keys, Object),\n\t      nativeMax = Math.max,\n\t      nativeNow = Date.now;\n\t\n\t  /* Built-in method references that are verified to be native. */\n\t  var DataView = getNative(root, 'DataView'),\n\t      Map = getNative(root, 'Map'),\n\t      Promise = getNative(root, 'Promise'),\n\t      Set = getNative(root, 'Set'),\n\t      WeakMap = getNative(root, 'WeakMap'),\n\t      nativeCreate = getNative(Object, 'create');\n\t\n\t  /** Used to lookup unminified function names. */\n\t  var realNames = {};\n\t\n\t  /** Used to detect maps, sets, and weakmaps. */\n\t  var dataViewCtorString = toSource(DataView),\n\t      mapCtorString = toSource(Map),\n\t      promiseCtorString = toSource(Promise),\n\t      setCtorString = toSource(Set),\n\t      weakMapCtorString = toSource(WeakMap);\n\t\n\t  /** Used to convert symbols to primitives and strings. */\n\t  var symbolProto = Symbol ? Symbol.prototype : undefined,\n\t      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n\t      symbolToString = symbolProto ? symbolProto.toString : undefined;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a `lodash` object which wraps `value` to enable implicit method\n\t   * chain sequences. Methods that operate on and return arrays, collections,\n\t   * and functions can be chained together. Methods that retrieve a single value\n\t   * or may return a primitive value will automatically end the chain sequence\n\t   * and return the unwrapped value. Otherwise, the value must be unwrapped\n\t   * with `_#value`.\n\t   *\n\t   * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n\t   * enabled using `_.chain`.\n\t   *\n\t   * The execution of chained methods is lazy, that is, it's deferred until\n\t   * `_#value` is implicitly or explicitly called.\n\t   *\n\t   * Lazy evaluation allows several methods to support shortcut fusion.\n\t   * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n\t   * the creation of intermediate arrays and can greatly reduce the number of\n\t   * iteratee executions. Sections of a chain sequence qualify for shortcut\n\t   * fusion if the section is applied to an array of at least `200` elements\n\t   * and any iteratees accept only one argument. The heuristic for whether a\n\t   * section qualifies for shortcut fusion is subject to change.\n\t   *\n\t   * Chaining is supported in custom builds as long as the `_#value` method is\n\t   * directly or indirectly included in the build.\n\t   *\n\t   * In addition to lodash methods, wrappers have `Array` and `String` methods.\n\t   *\n\t   * The wrapper `Array` methods are:\n\t   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n\t   *\n\t   * The wrapper `String` methods are:\n\t   * `replace` and `split`\n\t   *\n\t   * The wrapper methods that support shortcut fusion are:\n\t   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n\t   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n\t   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n\t   *\n\t   * The chainable wrapper methods are:\n\t   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n\t   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n\t   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n\t   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n\t   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n\t   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n\t   * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n\t   * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n\t   * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n\t   * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n\t   * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n\t   * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n\t   * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n\t   * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n\t   * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n\t   * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n\t   * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n\t   * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n\t   * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n\t   * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n\t   * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n\t   * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n\t   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n\t   * `zipObject`, `zipObjectDeep`, and `zipWith`\n\t   *\n\t   * The wrapper methods that are **not** chainable by default are:\n\t   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n\t   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n\t   * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n\t   * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n\t   * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n\t   * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n\t   * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n\t   * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n\t   * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n\t   * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n\t   * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n\t   * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n\t   * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n\t   * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n\t   * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n\t   * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n\t   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n\t   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n\t   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n\t   * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n\t   * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n\t   * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n\t   * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n\t   * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n\t   * `upperFirst`, `value`, and `words`\n\t   *\n\t   * @name _\n\t   * @constructor\n\t   * @category Seq\n\t   * @param {*} value The value to wrap in a `lodash` instance.\n\t   * @returns {Object} Returns the new `lodash` wrapper instance.\n\t   * @example\n\t   *\n\t   * function square(n) {\n\t   *   return n * n;\n\t   * }\n\t   *\n\t   * var wrapped = _([1, 2, 3]);\n\t   *\n\t   * // Returns an unwrapped value.\n\t   * wrapped.reduce(_.add);\n\t   * // => 6\n\t   *\n\t   * // Returns a wrapped value.\n\t   * var squares = wrapped.map(square);\n\t   *\n\t   * _.isArray(squares);\n\t   * // => false\n\t   *\n\t   * _.isArray(squares.value());\n\t   * // => true\n\t   */\n\t  function lodash() {\n\t    // No operation performed.\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.create` without support for assigning\n\t   * properties to the created object.\n\t   *\n\t   * @private\n\t   * @param {Object} proto The object to inherit from.\n\t   * @returns {Object} Returns the new object.\n\t   */\n\t  var baseCreate = (function() {\n\t    function object() {}\n\t    return function(proto) {\n\t      if (!isObject(proto)) {\n\t        return {};\n\t      }\n\t      if (objectCreate) {\n\t        return objectCreate(proto);\n\t      }\n\t      object.prototype = proto;\n\t      var result = new object;\n\t      object.prototype = undefined;\n\t      return result;\n\t    };\n\t  }());\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a hash object.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function Hash(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\t\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Removes all key-value entries from the hash.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf Hash\n\t   */\n\t  function hashClear() {\n\t    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n\t    this.size = 0;\n\t  }\n\t\n\t  /**\n\t   * Removes `key` and its value from the hash.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf Hash\n\t   * @param {Object} hash The hash to modify.\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function hashDelete(key) {\n\t    var result = this.has(key) && delete this.__data__[key];\n\t    this.size -= result ? 1 : 0;\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Gets the hash value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function hashGet(key) {\n\t    var data = this.__data__;\n\t    if (nativeCreate) {\n\t      var result = data[key];\n\t      return result === HASH_UNDEFINED ? undefined : result;\n\t    }\n\t    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n\t  }\n\t\n\t  /**\n\t   * Checks if a hash value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function hashHas(key) {\n\t    var data = this.__data__;\n\t    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n\t  }\n\t\n\t  /**\n\t   * Sets the hash `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the hash instance.\n\t   */\n\t  function hashSet(key, value) {\n\t    var data = this.__data__;\n\t    this.size += this.has(key) ? 0 : 1;\n\t    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n\t    return this;\n\t  }\n\t\n\t  // Add methods to `Hash`.\n\t  Hash.prototype.clear = hashClear;\n\t  Hash.prototype['delete'] = hashDelete;\n\t  Hash.prototype.get = hashGet;\n\t  Hash.prototype.has = hashHas;\n\t  Hash.prototype.set = hashSet;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates an list cache object.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function ListCache(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\t\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Removes all key-value entries from the list cache.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf ListCache\n\t   */\n\t  function listCacheClear() {\n\t    this.__data__ = [];\n\t    this.size = 0;\n\t  }\n\t\n\t  /**\n\t   * Removes `key` and its value from the list cache.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function listCacheDelete(key) {\n\t    var data = this.__data__,\n\t        index = assocIndexOf(data, key);\n\t\n\t    if (index < 0) {\n\t      return false;\n\t    }\n\t    var lastIndex = data.length - 1;\n\t    if (index == lastIndex) {\n\t      data.pop();\n\t    } else {\n\t      splice.call(data, index, 1);\n\t    }\n\t    --this.size;\n\t    return true;\n\t  }\n\t\n\t  /**\n\t   * Gets the list cache value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function listCacheGet(key) {\n\t    var data = this.__data__,\n\t        index = assocIndexOf(data, key);\n\t\n\t    return index < 0 ? undefined : data[index][1];\n\t  }\n\t\n\t  /**\n\t   * Checks if a list cache value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function listCacheHas(key) {\n\t    return assocIndexOf(this.__data__, key) > -1;\n\t  }\n\t\n\t  /**\n\t   * Sets the list cache `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the list cache instance.\n\t   */\n\t  function listCacheSet(key, value) {\n\t    var data = this.__data__,\n\t        index = assocIndexOf(data, key);\n\t\n\t    if (index < 0) {\n\t      ++this.size;\n\t      data.push([key, value]);\n\t    } else {\n\t      data[index][1] = value;\n\t    }\n\t    return this;\n\t  }\n\t\n\t  // Add methods to `ListCache`.\n\t  ListCache.prototype.clear = listCacheClear;\n\t  ListCache.prototype['delete'] = listCacheDelete;\n\t  ListCache.prototype.get = listCacheGet;\n\t  ListCache.prototype.has = listCacheHas;\n\t  ListCache.prototype.set = listCacheSet;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a map cache object to store key-value pairs.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function MapCache(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\t\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Removes all key-value entries from the map.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf MapCache\n\t   */\n\t  function mapCacheClear() {\n\t    this.size = 0;\n\t    this.__data__ = {\n\t      'hash': new Hash,\n\t      'map': new (Map || ListCache),\n\t      'string': new Hash\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Removes `key` and its value from the map.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function mapCacheDelete(key) {\n\t    var result = getMapData(this, key)['delete'](key);\n\t    this.size -= result ? 1 : 0;\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Gets the map value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function mapCacheGet(key) {\n\t    return getMapData(this, key).get(key);\n\t  }\n\t\n\t  /**\n\t   * Checks if a map value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function mapCacheHas(key) {\n\t    return getMapData(this, key).has(key);\n\t  }\n\t\n\t  /**\n\t   * Sets the map `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the map cache instance.\n\t   */\n\t  function mapCacheSet(key, value) {\n\t    var data = getMapData(this, key),\n\t        size = data.size;\n\t\n\t    data.set(key, value);\n\t    this.size += data.size == size ? 0 : 1;\n\t    return this;\n\t  }\n\t\n\t  // Add methods to `MapCache`.\n\t  MapCache.prototype.clear = mapCacheClear;\n\t  MapCache.prototype['delete'] = mapCacheDelete;\n\t  MapCache.prototype.get = mapCacheGet;\n\t  MapCache.prototype.has = mapCacheHas;\n\t  MapCache.prototype.set = mapCacheSet;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   *\n\t   * Creates an array cache object to store unique values.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [values] The values to cache.\n\t   */\n\t  function SetCache(values) {\n\t    var index = -1,\n\t        length = values == null ? 0 : values.length;\n\t\n\t    this.__data__ = new MapCache;\n\t    while (++index < length) {\n\t      this.add(values[index]);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Adds `value` to the array cache.\n\t   *\n\t   * @private\n\t   * @name add\n\t   * @memberOf SetCache\n\t   * @alias push\n\t   * @param {*} value The value to cache.\n\t   * @returns {Object} Returns the cache instance.\n\t   */\n\t  function setCacheAdd(value) {\n\t    this.__data__.set(value, HASH_UNDEFINED);\n\t    return this;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is in the array cache.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf SetCache\n\t   * @param {*} value The value to search for.\n\t   * @returns {number} Returns `true` if `value` is found, else `false`.\n\t   */\n\t  function setCacheHas(value) {\n\t    return this.__data__.has(value);\n\t  }\n\t\n\t  // Add methods to `SetCache`.\n\t  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n\t  SetCache.prototype.has = setCacheHas;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a stack cache object to store key-value pairs.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function Stack(entries) {\n\t    var data = this.__data__ = new ListCache(entries);\n\t    this.size = data.size;\n\t  }\n\t\n\t  /**\n\t   * Removes all key-value entries from the stack.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf Stack\n\t   */\n\t  function stackClear() {\n\t    this.__data__ = new ListCache;\n\t    this.size = 0;\n\t  }\n\t\n\t  /**\n\t   * Removes `key` and its value from the stack.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function stackDelete(key) {\n\t    var data = this.__data__,\n\t        result = data['delete'](key);\n\t\n\t    this.size = data.size;\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Gets the stack value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function stackGet(key) {\n\t    return this.__data__.get(key);\n\t  }\n\t\n\t  /**\n\t   * Checks if a stack value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function stackHas(key) {\n\t    return this.__data__.has(key);\n\t  }\n\t\n\t  /**\n\t   * Sets the stack `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the stack cache instance.\n\t   */\n\t  function stackSet(key, value) {\n\t    var data = this.__data__;\n\t    if (data instanceof ListCache) {\n\t      var pairs = data.__data__;\n\t      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n\t        pairs.push([key, value]);\n\t        this.size = ++data.size;\n\t        return this;\n\t      }\n\t      data = this.__data__ = new MapCache(pairs);\n\t    }\n\t    data.set(key, value);\n\t    this.size = data.size;\n\t    return this;\n\t  }\n\t\n\t  // Add methods to `Stack`.\n\t  Stack.prototype.clear = stackClear;\n\t  Stack.prototype['delete'] = stackDelete;\n\t  Stack.prototype.get = stackGet;\n\t  Stack.prototype.has = stackHas;\n\t  Stack.prototype.set = stackSet;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates an array of the enumerable property names of the array-like `value`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @param {boolean} inherited Specify returning inherited property names.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function arrayLikeKeys(value, inherited) {\n\t    var isArr = isArray(value),\n\t        isArg = !isArr && isArguments(value),\n\t        isBuff = !isArr && !isArg && isBuffer(value),\n\t        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n\t        skipIndexes = isArr || isArg || isBuff || isType,\n\t        result = skipIndexes ? baseTimes(value.length, String) : [],\n\t        length = result.length;\n\t\n\t    for (var key in value) {\n\t      if ((inherited || hasOwnProperty.call(value, key)) &&\n\t          !(skipIndexes && (\n\t             // Safari 9 has enumerable `arguments.length` in strict mode.\n\t             key == 'length' ||\n\t             // Node.js 0.10 has enumerable non-index properties on buffers.\n\t             (isBuff && (key == 'offset' || key == 'parent')) ||\n\t             // PhantomJS 2 has enumerable non-index properties on typed arrays.\n\t             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n\t             // Skip index properties.\n\t             isIndex(key, length)\n\t          ))) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Used by `_.defaults` to customize its `_.assignIn` use.\n\t   *\n\t   * @private\n\t   * @param {*} objValue The destination value.\n\t   * @param {*} srcValue The source value.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {Object} object The parent object of `objValue`.\n\t   * @returns {*} Returns the value to assign.\n\t   */\n\t  function assignInDefaults(objValue, srcValue, key, object) {\n\t    if (objValue === undefined ||\n\t        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n\t      return srcValue;\n\t    }\n\t    return objValue;\n\t  }\n\t\n\t  /**\n\t   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n\t   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t   * for equality comparisons.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {*} value The value to assign.\n\t   */\n\t  function assignValue(object, key, value) {\n\t    var objValue = object[key];\n\t    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      baseAssignValue(object, key, value);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Gets the index at which the `key` is found in `array` of key-value pairs.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to inspect.\n\t   * @param {*} key The key to search for.\n\t   * @returns {number} Returns the index of the matched value, else `-1`.\n\t   */\n\t  function assocIndexOf(array, key) {\n\t    var length = array.length;\n\t    while (length--) {\n\t      if (eq(array[length][0], key)) {\n\t        return length;\n\t      }\n\t    }\n\t    return -1;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.assign` without support for multiple sources\n\t   * or `customizer` functions.\n\t   *\n\t   * @private\n\t   * @param {Object} object The destination object.\n\t   * @param {Object} source The source object.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function baseAssign(object, source) {\n\t    return object && copyObject(source, keys(source), object);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.assignIn` without support for multiple sources\n\t   * or `customizer` functions.\n\t   *\n\t   * @private\n\t   * @param {Object} object The destination object.\n\t   * @param {Object} source The source object.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function baseAssignIn(object, source) {\n\t    return object && copyObject(source, keysIn(source), object);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `assignValue` and `assignMergeValue` without\n\t   * value checks.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {*} value The value to assign.\n\t   */\n\t  function baseAssignValue(object, key, value) {\n\t    if (key == '__proto__' && defineProperty) {\n\t      defineProperty(object, key, {\n\t        'configurable': true,\n\t        'enumerable': true,\n\t        'value': value,\n\t        'writable': true\n\t      });\n\t    } else {\n\t      object[key] = value;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n\t   * traversed objects.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to clone.\n\t   * @param {boolean} bitmask The bitmask flags.\n\t   *  1 - Deep clone\n\t   *  2 - Flatten inherited properties\n\t   *  4 - Clone symbols\n\t   * @param {Function} [customizer] The function to customize cloning.\n\t   * @param {string} [key] The key of `value`.\n\t   * @param {Object} [object] The parent object of `value`.\n\t   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n\t   * @returns {*} Returns the cloned value.\n\t   */\n\t  function baseClone(value, bitmask, customizer, key, object, stack) {\n\t    var result,\n\t        isDeep = bitmask & CLONE_DEEP_FLAG,\n\t        isFlat = bitmask & CLONE_FLAT_FLAG,\n\t        isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\t\n\t    if (customizer) {\n\t      result = object ? customizer(value, key, object, stack) : customizer(value);\n\t    }\n\t    if (result !== undefined) {\n\t      return result;\n\t    }\n\t    if (!isObject(value)) {\n\t      return value;\n\t    }\n\t    var isArr = isArray(value);\n\t    if (isArr) {\n\t      result = initCloneArray(value);\n\t      if (!isDeep) {\n\t        return copyArray(value, result);\n\t      }\n\t    } else {\n\t      var tag = getTag(value),\n\t          isFunc = tag == funcTag || tag == genTag;\n\t\n\t      if (isBuffer(value)) {\n\t        return cloneBuffer(value, isDeep);\n\t      }\n\t      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n\t        result = (isFlat || isFunc) ? {} : initCloneObject(value);\n\t        if (!isDeep) {\n\t          return isFlat\n\t            ? copySymbolsIn(value, baseAssignIn(result, value))\n\t            : copySymbols(value, baseAssign(result, value));\n\t        }\n\t      } else {\n\t        if (!cloneableTags[tag]) {\n\t          return object ? value : {};\n\t        }\n\t        result = initCloneByTag(value, tag, baseClone, isDeep);\n\t      }\n\t    }\n\t    // Check for circular references and return its corresponding clone.\n\t    stack || (stack = new Stack);\n\t    var stacked = stack.get(value);\n\t    if (stacked) {\n\t      return stacked;\n\t    }\n\t    stack.set(value, result);\n\t\n\t    var keysFunc = isFull\n\t      ? (isFlat ? getAllKeysIn : getAllKeys)\n\t      : (isFlat ? keysIn : keys);\n\t\n\t    var props = isArr ? undefined : keysFunc(value);\n\t    arrayEach(props || value, function(subValue, key) {\n\t      if (props) {\n\t        key = subValue;\n\t        subValue = value[key];\n\t      }\n\t      // Recursively populate clone (susceptible to call stack limits).\n\t      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.forEach` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array|Object} Returns `collection`.\n\t   */\n\t  var baseEach = createBaseEach(baseForOwn);\n\t\n\t  /**\n\t   * The base implementation of `_.filter` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} predicate The function invoked per iteration.\n\t   * @returns {Array} Returns the new filtered array.\n\t   */\n\t  function baseFilter(collection, predicate) {\n\t    var result = [];\n\t    baseEach(collection, function(value, index, collection) {\n\t      if (predicate(value, index, collection)) {\n\t        result.push(value);\n\t      }\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.flatten` with support for restricting flattening.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to flatten.\n\t   * @param {number} depth The maximum recursion depth.\n\t   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n\t   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n\t   * @param {Array} [result=[]] The initial result value.\n\t   * @returns {Array} Returns the new flattened array.\n\t   */\n\t  function baseFlatten(array, depth, predicate, isStrict, result) {\n\t    var index = -1,\n\t        length = array.length;\n\t\n\t    predicate || (predicate = isFlattenable);\n\t    result || (result = []);\n\t\n\t    while (++index < length) {\n\t      var value = array[index];\n\t      if (depth > 0 && predicate(value)) {\n\t        if (depth > 1) {\n\t          // Recursively flatten arrays (susceptible to call stack limits).\n\t          baseFlatten(value, depth - 1, predicate, isStrict, result);\n\t        } else {\n\t          arrayPush(result, value);\n\t        }\n\t      } else if (!isStrict) {\n\t        result[result.length] = value;\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `baseForOwn` which iterates over `object`\n\t   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n\t   * Iteratee functions may exit iteration early by explicitly returning `false`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @param {Function} keysFunc The function to get the keys of `object`.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  var baseFor = createBaseFor();\n\t\n\t  /**\n\t   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function baseForOwn(object, iteratee) {\n\t    return object && baseFor(object, iteratee, keys);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.functions` which creates an array of\n\t   * `object` function property names filtered from `props`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to inspect.\n\t   * @param {Array} props The property names to filter.\n\t   * @returns {Array} Returns the function names.\n\t   */\n\t  function baseFunctions(object, props) {\n\t    return arrayFilter(props, function(key) {\n\t      return isFunction(object[key]);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.get` without support for default values.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {Array|string} path The path of the property to get.\n\t   * @returns {*} Returns the resolved value.\n\t   */\n\t  function baseGet(object, path) {\n\t    path = castPath(path, object);\n\t\n\t    var index = 0,\n\t        length = path.length;\n\t\n\t    while (object != null && index < length) {\n\t      object = object[toKey(path[index++])];\n\t    }\n\t    return (index && index == length) ? object : undefined;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n\t   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n\t   * symbols of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {Function} keysFunc The function to get the keys of `object`.\n\t   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n\t   * @returns {Array} Returns the array of property names and symbols.\n\t   */\n\t  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n\t    var result = keysFunc(object);\n\t    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `getTag` without fallbacks for buggy environments.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @returns {string} Returns the `toStringTag`.\n\t   */\n\t  function baseGetTag(value) {\n\t    if (value == null) {\n\t      return value === undefined ? undefinedTag : nullTag;\n\t    }\n\t    value = Object(value);\n\t    return (symToStringTag && symToStringTag in value)\n\t      ? getRawTag(value)\n\t      : objectToString(value);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.hasIn` without support for deep paths.\n\t   *\n\t   * @private\n\t   * @param {Object} [object] The object to query.\n\t   * @param {Array|string} key The key to check.\n\t   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n\t   */\n\t  function baseHasIn(object, key) {\n\t    return object != null && key in Object(object);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.isArguments`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t   */\n\t  function baseIsArguments(value) {\n\t    return isObjectLike(value) && baseGetTag(value) == argsTag;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.isEqual` which supports partial comparisons\n\t   * and tracks traversed objects.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to compare.\n\t   * @param {*} other The other value to compare.\n\t   * @param {boolean} bitmask The bitmask flags.\n\t   *  1 - Unordered comparison\n\t   *  2 - Partial comparison\n\t   * @param {Function} [customizer] The function to customize comparisons.\n\t   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n\t   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t   */\n\t  function baseIsEqual(value, other, bitmask, customizer, stack) {\n\t    if (value === other) {\n\t      return true;\n\t    }\n\t    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n\t      return value !== value && other !== other;\n\t    }\n\t    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseIsEqual` for arrays and objects which performs\n\t   * deep comparisons and tracks traversed objects enabling objects with circular\n\t   * references to be compared.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to compare.\n\t   * @param {Object} other The other object to compare.\n\t   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t   * @param {Function} customizer The function to customize comparisons.\n\t   * @param {Function} equalFunc The function to determine equivalents of values.\n\t   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n\t   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t   */\n\t  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n\t    var objIsArr = isArray(object),\n\t        othIsArr = isArray(other),\n\t        objTag = arrayTag,\n\t        othTag = arrayTag;\n\t\n\t    if (!objIsArr) {\n\t      objTag = getTag(object);\n\t      objTag = objTag == argsTag ? objectTag : objTag;\n\t    }\n\t    if (!othIsArr) {\n\t      othTag = getTag(other);\n\t      othTag = othTag == argsTag ? objectTag : othTag;\n\t    }\n\t    var objIsObj = objTag == objectTag,\n\t        othIsObj = othTag == objectTag,\n\t        isSameTag = objTag == othTag;\n\t\n\t    if (isSameTag && isBuffer(object)) {\n\t      if (!isBuffer(other)) {\n\t        return false;\n\t      }\n\t      objIsArr = true;\n\t      objIsObj = false;\n\t    }\n\t    if (isSameTag && !objIsObj) {\n\t      stack || (stack = new Stack);\n\t      return (objIsArr || isTypedArray(object))\n\t        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n\t        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n\t    }\n\t    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n\t      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n\t          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\t\n\t      if (objIsWrapped || othIsWrapped) {\n\t        var objUnwrapped = objIsWrapped ? object.value() : object,\n\t            othUnwrapped = othIsWrapped ? other.value() : other;\n\t\n\t        stack || (stack = new Stack);\n\t        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n\t      }\n\t    }\n\t    if (!isSameTag) {\n\t      return false;\n\t    }\n\t    stack || (stack = new Stack);\n\t    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to inspect.\n\t   * @param {Object} source The object of property values to match.\n\t   * @param {Array} matchData The property names, values, and compare flags to match.\n\t   * @param {Function} [customizer] The function to customize comparisons.\n\t   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n\t   */\n\t  function baseIsMatch(object, source, matchData, customizer) {\n\t    var index = matchData.length,\n\t        length = index,\n\t        noCustomizer = !customizer;\n\t\n\t    if (object == null) {\n\t      return !length;\n\t    }\n\t    object = Object(object);\n\t    while (index--) {\n\t      var data = matchData[index];\n\t      if ((noCustomizer && data[2])\n\t            ? data[1] !== object[data[0]]\n\t            : !(data[0] in object)\n\t          ) {\n\t        return false;\n\t      }\n\t    }\n\t    while (++index < length) {\n\t      data = matchData[index];\n\t      var key = data[0],\n\t          objValue = object[key],\n\t          srcValue = data[1];\n\t\n\t      if (noCustomizer && data[2]) {\n\t        if (objValue === undefined && !(key in object)) {\n\t          return false;\n\t        }\n\t      } else {\n\t        var stack = new Stack;\n\t        if (customizer) {\n\t          var result = customizer(objValue, srcValue, key, object, source, stack);\n\t        }\n\t        if (!(result === undefined\n\t              ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n\t              : result\n\t            )) {\n\t          return false;\n\t        }\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.isNative` without bad shim checks.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a native function,\n\t   *  else `false`.\n\t   */\n\t  function baseIsNative(value) {\n\t    if (!isObject(value) || isMasked(value)) {\n\t      return false;\n\t    }\n\t    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n\t    return pattern.test(toSource(value));\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t   */\n\t  function baseIsTypedArray(value) {\n\t    return isObjectLike(value) &&\n\t      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.iteratee`.\n\t   *\n\t   * @private\n\t   * @param {*} [value=_.identity] The value to convert to an iteratee.\n\t   * @returns {Function} Returns the iteratee.\n\t   */\n\t  function baseIteratee(value) {\n\t    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n\t    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n\t    if (typeof value == 'function') {\n\t      return value;\n\t    }\n\t    if (value == null) {\n\t      return identity;\n\t    }\n\t    if (typeof value == 'object') {\n\t      return isArray(value)\n\t        ? baseMatchesProperty(value[0], value[1])\n\t        : baseMatches(value);\n\t    }\n\t    return property(value);\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function baseKeys(object) {\n\t    if (!isPrototype(object)) {\n\t      return nativeKeys(object);\n\t    }\n\t    var result = [];\n\t    for (var key in Object(object)) {\n\t      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function baseKeysIn(object) {\n\t    if (!isObject(object)) {\n\t      return nativeKeysIn(object);\n\t    }\n\t    var isProto = isPrototype(object),\n\t        result = [];\n\t\n\t    for (var key in object) {\n\t      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.map` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array} Returns the new mapped array.\n\t   */\n\t  function baseMap(collection, iteratee) {\n\t    var index = -1,\n\t        result = isArrayLike(collection) ? Array(collection.length) : [];\n\t\n\t    baseEach(collection, function(value, key, collection) {\n\t      result[++index] = iteratee(value, key, collection);\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.matches` which doesn't clone `source`.\n\t   *\n\t   * @private\n\t   * @param {Object} source The object of property values to match.\n\t   * @returns {Function} Returns the new spec function.\n\t   */\n\t  function baseMatches(source) {\n\t    var matchData = getMatchData(source);\n\t    if (matchData.length == 1 && matchData[0][2]) {\n\t      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n\t    }\n\t    return function(object) {\n\t      return object === source || baseIsMatch(object, source, matchData);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n\t   *\n\t   * @private\n\t   * @param {string} path The path of the property to get.\n\t   * @param {*} srcValue The value to match.\n\t   * @returns {Function} Returns the new spec function.\n\t   */\n\t  function baseMatchesProperty(path, srcValue) {\n\t    if (isKey(path) && isStrictComparable(srcValue)) {\n\t      return matchesStrictComparable(toKey(path), srcValue);\n\t    }\n\t    return function(object) {\n\t      var objValue = get(object, path);\n\t      return (objValue === undefined && objValue === srcValue)\n\t        ? hasIn(object, path)\n\t        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.pick` without support for individual\n\t   * property identifiers.\n\t   *\n\t   * @private\n\t   * @param {Object} object The source object.\n\t   * @param {string[]} paths The property paths to pick.\n\t   * @returns {Object} Returns the new object.\n\t   */\n\t  function basePick(object, paths) {\n\t    object = Object(object);\n\t    return basePickBy(object, paths, function(value, path) {\n\t      return hasIn(object, path);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n\t   *\n\t   * @private\n\t   * @param {Object} object The source object.\n\t   * @param {string[]} paths The property paths to pick.\n\t   * @param {Function} predicate The function invoked per property.\n\t   * @returns {Object} Returns the new object.\n\t   */\n\t  function basePickBy(object, paths, predicate) {\n\t    var index = -1,\n\t        length = paths.length,\n\t        result = {};\n\t\n\t    while (++index < length) {\n\t      var path = paths[index],\n\t          value = baseGet(object, path);\n\t\n\t      if (predicate(value, path)) {\n\t        baseSet(result, path, value);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseProperty` which supports deep paths.\n\t   *\n\t   * @private\n\t   * @param {Array|string} path The path of the property to get.\n\t   * @returns {Function} Returns the new accessor function.\n\t   */\n\t  function basePropertyDeep(path) {\n\t    return function(object) {\n\t      return baseGet(object, path);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to apply a rest parameter to.\n\t   * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function baseRest(func, start) {\n\t    return setToString(overRest(func, start, identity), func + '');\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `_.set`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {Array|string} path The path of the property to set.\n\t   * @param {*} value The value to set.\n\t   * @param {Function} [customizer] The function to customize path creation.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function baseSet(object, path, value, customizer) {\n\t    if (!isObject(object)) {\n\t      return object;\n\t    }\n\t    path = castPath(path, object);\n\t\n\t    var index = -1,\n\t        length = path.length,\n\t        lastIndex = length - 1,\n\t        nested = object;\n\t\n\t    while (nested != null && ++index < length) {\n\t      var key = toKey(path[index]),\n\t          newValue = value;\n\t\n\t      if (index != lastIndex) {\n\t        var objValue = nested[key];\n\t        newValue = customizer ? customizer(objValue, key, nested) : undefined;\n\t        if (newValue === undefined) {\n\t          newValue = isObject(objValue)\n\t            ? objValue\n\t            : (isIndex(path[index + 1]) ? [] : {});\n\t        }\n\t      }\n\t      assignValue(nested, key, newValue);\n\t      nested = nested[key];\n\t    }\n\t    return object;\n\t  }\n\t\n\t  /**\n\t   * The base implementation of `setToString` without support for hot loop shorting.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to modify.\n\t   * @param {Function} string The `toString` result.\n\t   * @returns {Function} Returns `func`.\n\t   */\n\t  var baseSetToString = !defineProperty ? identity : function(func, string) {\n\t    return defineProperty(func, 'toString', {\n\t      'configurable': true,\n\t      'enumerable': false,\n\t      'value': constant(string),\n\t      'writable': true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * The base implementation of `_.toString` which doesn't convert nullish\n\t   * values to empty strings.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to process.\n\t   * @returns {string} Returns the string.\n\t   */\n\t  function baseToString(value) {\n\t    // Exit early for strings to avoid a performance hit in some environments.\n\t    if (typeof value == 'string') {\n\t      return value;\n\t    }\n\t    if (isArray(value)) {\n\t      // Recursively convert values (susceptible to call stack limits).\n\t      return arrayMap(value, baseToString) + '';\n\t    }\n\t    if (isSymbol(value)) {\n\t      return symbolToString ? symbolToString.call(value) : '';\n\t    }\n\t    var result = (value + '');\n\t    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n\t  }\n\t\n\t  /**\n\t   * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n\t   *\n\t   * @private\n\t   * @param {Array} props The property identifiers.\n\t   * @param {Array} values The property values.\n\t   * @param {Function} assignFunc The function to assign values.\n\t   * @returns {Object} Returns the new object.\n\t   */\n\t  function baseZipObject(props, values, assignFunc) {\n\t    var index = -1,\n\t        length = props.length,\n\t        valsLength = values.length,\n\t        result = {};\n\t\n\t    while (++index < length) {\n\t      var value = index < valsLength ? values[index] : undefined;\n\t      assignFunc(result, props[index], value);\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Casts `value` to a path array if it's not one.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to inspect.\n\t   * @param {Object} [object] The object to query keys on.\n\t   * @returns {Array} Returns the cast property path array.\n\t   */\n\t  function castPath(value, object) {\n\t    if (isArray(value)) {\n\t      return value;\n\t    }\n\t    return isKey(value, object) ? [value] : stringToPath(toString(value));\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of  `buffer`.\n\t   *\n\t   * @private\n\t   * @param {Buffer} buffer The buffer to clone.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Buffer} Returns the cloned buffer.\n\t   */\n\t  function cloneBuffer(buffer, isDeep) {\n\t    if (isDeep) {\n\t      return buffer.slice();\n\t    }\n\t    var length = buffer.length,\n\t        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\t\n\t    buffer.copy(result);\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `arrayBuffer`.\n\t   *\n\t   * @private\n\t   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n\t   * @returns {ArrayBuffer} Returns the cloned array buffer.\n\t   */\n\t  function cloneArrayBuffer(arrayBuffer) {\n\t    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n\t    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `dataView`.\n\t   *\n\t   * @private\n\t   * @param {Object} dataView The data view to clone.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the cloned data view.\n\t   */\n\t  function cloneDataView(dataView, isDeep) {\n\t    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n\t    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `map`.\n\t   *\n\t   * @private\n\t   * @param {Object} map The map to clone.\n\t   * @param {Function} cloneFunc The function to clone values.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the cloned map.\n\t   */\n\t  function cloneMap(map, isDeep, cloneFunc) {\n\t    var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n\t    return arrayReduce(array, addMapEntry, new map.constructor);\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `regexp`.\n\t   *\n\t   * @private\n\t   * @param {Object} regexp The regexp to clone.\n\t   * @returns {Object} Returns the cloned regexp.\n\t   */\n\t  function cloneRegExp(regexp) {\n\t    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n\t    result.lastIndex = regexp.lastIndex;\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `set`.\n\t   *\n\t   * @private\n\t   * @param {Object} set The set to clone.\n\t   * @param {Function} cloneFunc The function to clone values.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the cloned set.\n\t   */\n\t  function cloneSet(set, isDeep, cloneFunc) {\n\t    var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n\t    return arrayReduce(array, addSetEntry, new set.constructor);\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of the `symbol` object.\n\t   *\n\t   * @private\n\t   * @param {Object} symbol The symbol object to clone.\n\t   * @returns {Object} Returns the cloned symbol object.\n\t   */\n\t  function cloneSymbol(symbol) {\n\t    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n\t  }\n\t\n\t  /**\n\t   * Creates a clone of `typedArray`.\n\t   *\n\t   * @private\n\t   * @param {Object} typedArray The typed array to clone.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the cloned typed array.\n\t   */\n\t  function cloneTypedArray(typedArray, isDeep) {\n\t    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n\t    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n\t  }\n\t\n\t  /**\n\t   * Copies the values of `source` to `array`.\n\t   *\n\t   * @private\n\t   * @param {Array} source The array to copy values from.\n\t   * @param {Array} [array=[]] The array to copy values to.\n\t   * @returns {Array} Returns `array`.\n\t   */\n\t  function copyArray(source, array) {\n\t    var index = -1,\n\t        length = source.length;\n\t\n\t    array || (array = Array(length));\n\t    while (++index < length) {\n\t      array[index] = source[index];\n\t    }\n\t    return array;\n\t  }\n\t\n\t  /**\n\t   * Copies properties of `source` to `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} source The object to copy properties from.\n\t   * @param {Array} props The property identifiers to copy.\n\t   * @param {Object} [object={}] The object to copy properties to.\n\t   * @param {Function} [customizer] The function to customize copied values.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function copyObject(source, props, object, customizer) {\n\t    var isNew = !object;\n\t    object || (object = {});\n\t\n\t    var index = -1,\n\t        length = props.length;\n\t\n\t    while (++index < length) {\n\t      var key = props[index];\n\t\n\t      var newValue = customizer\n\t        ? customizer(object[key], source[key], key, object, source)\n\t        : undefined;\n\t\n\t      if (newValue === undefined) {\n\t        newValue = source[key];\n\t      }\n\t      if (isNew) {\n\t        baseAssignValue(object, key, newValue);\n\t      } else {\n\t        assignValue(object, key, newValue);\n\t      }\n\t    }\n\t    return object;\n\t  }\n\t\n\t  /**\n\t   * Copies own symbols of `source` to `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} source The object to copy symbols from.\n\t   * @param {Object} [object={}] The object to copy symbols to.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function copySymbols(source, object) {\n\t    return copyObject(source, getSymbols(source), object);\n\t  }\n\t\n\t  /**\n\t   * Copies own and inherited symbols of `source` to `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} source The object to copy symbols from.\n\t   * @param {Object} [object={}] The object to copy symbols to.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function copySymbolsIn(source, object) {\n\t    return copyObject(source, getSymbolsIn(source), object);\n\t  }\n\t\n\t  /**\n\t   * Creates a function like `_.assign`.\n\t   *\n\t   * @private\n\t   * @param {Function} assigner The function to assign values.\n\t   * @returns {Function} Returns the new assigner function.\n\t   */\n\t  function createAssigner(assigner) {\n\t    return baseRest(function(object, sources) {\n\t      var index = -1,\n\t          length = sources.length,\n\t          customizer = length > 1 ? sources[length - 1] : undefined,\n\t          guard = length > 2 ? sources[2] : undefined;\n\t\n\t      customizer = (assigner.length > 3 && typeof customizer == 'function')\n\t        ? (length--, customizer)\n\t        : undefined;\n\t\n\t      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n\t        customizer = length < 3 ? undefined : customizer;\n\t        length = 1;\n\t      }\n\t      object = Object(object);\n\t      while (++index < length) {\n\t        var source = sources[index];\n\t        if (source) {\n\t          assigner(object, source, index, customizer);\n\t        }\n\t      }\n\t      return object;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Creates a `baseEach` or `baseEachRight` function.\n\t   *\n\t   * @private\n\t   * @param {Function} eachFunc The function to iterate over a collection.\n\t   * @param {boolean} [fromRight] Specify iterating from right to left.\n\t   * @returns {Function} Returns the new base function.\n\t   */\n\t  function createBaseEach(eachFunc, fromRight) {\n\t    return function(collection, iteratee) {\n\t      if (collection == null) {\n\t        return collection;\n\t      }\n\t      if (!isArrayLike(collection)) {\n\t        return eachFunc(collection, iteratee);\n\t      }\n\t      var length = collection.length,\n\t          index = fromRight ? length : -1,\n\t          iterable = Object(collection);\n\t\n\t      while ((fromRight ? index-- : ++index < length)) {\n\t        if (iteratee(iterable[index], index, iterable) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return collection;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n\t   *\n\t   * @private\n\t   * @param {boolean} [fromRight] Specify iterating from right to left.\n\t   * @returns {Function} Returns the new base function.\n\t   */\n\t  function createBaseFor(fromRight) {\n\t    return function(object, iteratee, keysFunc) {\n\t      var index = -1,\n\t          iterable = Object(object),\n\t          props = keysFunc(object),\n\t          length = props.length;\n\t\n\t      while (length--) {\n\t        var key = props[fromRight ? length : ++index];\n\t        if (iteratee(iterable[key], key, iterable) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return object;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseIsEqualDeep` for arrays with support for\n\t   * partial deep comparisons.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to compare.\n\t   * @param {Array} other The other array to compare.\n\t   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t   * @param {Function} customizer The function to customize comparisons.\n\t   * @param {Function} equalFunc The function to determine equivalents of values.\n\t   * @param {Object} stack Tracks traversed `array` and `other` objects.\n\t   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n\t   */\n\t  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n\t    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n\t        arrLength = array.length,\n\t        othLength = other.length;\n\t\n\t    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n\t      return false;\n\t    }\n\t    // Assume cyclic values are equal.\n\t    var stacked = stack.get(array);\n\t    if (stacked && stack.get(other)) {\n\t      return stacked == other;\n\t    }\n\t    var index = -1,\n\t        result = true,\n\t        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\t\n\t    stack.set(array, other);\n\t    stack.set(other, array);\n\t\n\t    // Ignore non-index properties.\n\t    while (++index < arrLength) {\n\t      var arrValue = array[index],\n\t          othValue = other[index];\n\t\n\t      if (customizer) {\n\t        var compared = isPartial\n\t          ? customizer(othValue, arrValue, index, other, array, stack)\n\t          : customizer(arrValue, othValue, index, array, other, stack);\n\t      }\n\t      if (compared !== undefined) {\n\t        if (compared) {\n\t          continue;\n\t        }\n\t        result = false;\n\t        break;\n\t      }\n\t      // Recursively compare arrays (susceptible to call stack limits).\n\t      if (seen) {\n\t        if (!arraySome(other, function(othValue, othIndex) {\n\t              if (!cacheHas(seen, othIndex) &&\n\t                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n\t                return seen.push(othIndex);\n\t              }\n\t            })) {\n\t          result = false;\n\t          break;\n\t        }\n\t      } else if (!(\n\t            arrValue === othValue ||\n\t              equalFunc(arrValue, othValue, bitmask, customizer, stack)\n\t          )) {\n\t        result = false;\n\t        break;\n\t      }\n\t    }\n\t    stack['delete'](array);\n\t    stack['delete'](other);\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseIsEqualDeep` for comparing objects of\n\t   * the same `toStringTag`.\n\t   *\n\t   * **Note:** This function only supports comparing values with tags of\n\t   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to compare.\n\t   * @param {Object} other The other object to compare.\n\t   * @param {string} tag The `toStringTag` of the objects to compare.\n\t   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t   * @param {Function} customizer The function to customize comparisons.\n\t   * @param {Function} equalFunc The function to determine equivalents of values.\n\t   * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t   */\n\t  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n\t    switch (tag) {\n\t      case dataViewTag:\n\t        if ((object.byteLength != other.byteLength) ||\n\t            (object.byteOffset != other.byteOffset)) {\n\t          return false;\n\t        }\n\t        object = object.buffer;\n\t        other = other.buffer;\n\t\n\t      case arrayBufferTag:\n\t        if ((object.byteLength != other.byteLength) ||\n\t            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n\t          return false;\n\t        }\n\t        return true;\n\t\n\t      case boolTag:\n\t      case dateTag:\n\t      case numberTag:\n\t        // Coerce booleans to `1` or `0` and dates to milliseconds.\n\t        // Invalid dates are coerced to `NaN`.\n\t        return eq(+object, +other);\n\t\n\t      case errorTag:\n\t        return object.name == other.name && object.message == other.message;\n\t\n\t      case regexpTag:\n\t      case stringTag:\n\t        // Coerce regexes to strings and treat strings, primitives and objects,\n\t        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n\t        // for more details.\n\t        return object == (other + '');\n\t\n\t      case mapTag:\n\t        var convert = mapToArray;\n\t\n\t      case setTag:\n\t        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n\t        convert || (convert = setToArray);\n\t\n\t        if (object.size != other.size && !isPartial) {\n\t          return false;\n\t        }\n\t        // Assume cyclic values are equal.\n\t        var stacked = stack.get(object);\n\t        if (stacked) {\n\t          return stacked == other;\n\t        }\n\t        bitmask |= COMPARE_UNORDERED_FLAG;\n\t\n\t        // Recursively compare objects (susceptible to call stack limits).\n\t        stack.set(object, other);\n\t        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n\t        stack['delete'](object);\n\t        return result;\n\t\n\t      case symbolTag:\n\t        if (symbolValueOf) {\n\t          return symbolValueOf.call(object) == symbolValueOf.call(other);\n\t        }\n\t    }\n\t    return false;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseIsEqualDeep` for objects with support for\n\t   * partial deep comparisons.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to compare.\n\t   * @param {Object} other The other object to compare.\n\t   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n\t   * @param {Function} customizer The function to customize comparisons.\n\t   * @param {Function} equalFunc The function to determine equivalents of values.\n\t   * @param {Object} stack Tracks traversed `object` and `other` objects.\n\t   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n\t   */\n\t  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n\t    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n\t        objProps = keys(object),\n\t        objLength = objProps.length,\n\t        othProps = keys(other),\n\t        othLength = othProps.length;\n\t\n\t    if (objLength != othLength && !isPartial) {\n\t      return false;\n\t    }\n\t    var index = objLength;\n\t    while (index--) {\n\t      var key = objProps[index];\n\t      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n\t        return false;\n\t      }\n\t    }\n\t    // Assume cyclic values are equal.\n\t    var stacked = stack.get(object);\n\t    if (stacked && stack.get(other)) {\n\t      return stacked == other;\n\t    }\n\t    var result = true;\n\t    stack.set(object, other);\n\t    stack.set(other, object);\n\t\n\t    var skipCtor = isPartial;\n\t    while (++index < objLength) {\n\t      key = objProps[index];\n\t      var objValue = object[key],\n\t          othValue = other[key];\n\t\n\t      if (customizer) {\n\t        var compared = isPartial\n\t          ? customizer(othValue, objValue, key, other, object, stack)\n\t          : customizer(objValue, othValue, key, object, other, stack);\n\t      }\n\t      // Recursively compare objects (susceptible to call stack limits).\n\t      if (!(compared === undefined\n\t            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n\t            : compared\n\t          )) {\n\t        result = false;\n\t        break;\n\t      }\n\t      skipCtor || (skipCtor = key == 'constructor');\n\t    }\n\t    if (result && !skipCtor) {\n\t      var objCtor = object.constructor,\n\t          othCtor = other.constructor;\n\t\n\t      // Non `Object` object instances with different constructors are not equal.\n\t      if (objCtor != othCtor &&\n\t          ('constructor' in object && 'constructor' in other) &&\n\t          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n\t            typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n\t        result = false;\n\t      }\n\t    }\n\t    stack['delete'](object);\n\t    stack['delete'](other);\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseRest` which flattens the rest array.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to apply a rest parameter to.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function flatRest(func) {\n\t    return setToString(overRest(func, undefined, flatten), func + '');\n\t  }\n\t\n\t  /**\n\t   * Creates an array of own enumerable property names and symbols of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names and symbols.\n\t   */\n\t  function getAllKeys(object) {\n\t    return baseGetAllKeys(object, keys, getSymbols);\n\t  }\n\t\n\t  /**\n\t   * Creates an array of own and inherited enumerable property names and\n\t   * symbols of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names and symbols.\n\t   */\n\t  function getAllKeysIn(object) {\n\t    return baseGetAllKeys(object, keysIn, getSymbolsIn);\n\t  }\n\t\n\t  /**\n\t   * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n\t   * this function returns the custom method, otherwise it returns `baseIteratee`.\n\t   * If arguments are provided, the chosen function is invoked with them and\n\t   * its result is returned.\n\t   *\n\t   * @private\n\t   * @param {*} [value] The value to convert to an iteratee.\n\t   * @param {number} [arity] The arity of the created iteratee.\n\t   * @returns {Function} Returns the chosen function or its result.\n\t   */\n\t  function getIteratee() {\n\t    var result = lodash.iteratee || iteratee;\n\t    result = result === iteratee ? baseIteratee : result;\n\t    return arguments.length ? result(arguments[0], arguments[1]) : result;\n\t  }\n\t\n\t  /**\n\t   * Gets the data for `map`.\n\t   *\n\t   * @private\n\t   * @param {Object} map The map to query.\n\t   * @param {string} key The reference key.\n\t   * @returns {*} Returns the map data.\n\t   */\n\t  function getMapData(map, key) {\n\t    var data = map.__data__;\n\t    return isKeyable(key)\n\t      ? data[typeof key == 'string' ? 'string' : 'hash']\n\t      : data.map;\n\t  }\n\t\n\t  /**\n\t   * Gets the property names, values, and compare flags of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the match data of `object`.\n\t   */\n\t  function getMatchData(object) {\n\t    var result = keys(object),\n\t        length = result.length;\n\t\n\t    while (length--) {\n\t      var key = result[length],\n\t          value = object[key];\n\t\n\t      result[length] = [key, value, isStrictComparable(value)];\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Gets the native function at `key` of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {string} key The key of the method to get.\n\t   * @returns {*} Returns the function if it's native, else `undefined`.\n\t   */\n\t  function getNative(object, key) {\n\t    var value = getValue(object, key);\n\t    return baseIsNative(value) ? value : undefined;\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @returns {string} Returns the raw `toStringTag`.\n\t   */\n\t  function getRawTag(value) {\n\t    var isOwn = hasOwnProperty.call(value, symToStringTag),\n\t        tag = value[symToStringTag];\n\t\n\t    try {\n\t      value[symToStringTag] = undefined;\n\t      var unmasked = true;\n\t    } catch (e) {}\n\t\n\t    var result = nativeObjectToString.call(value);\n\t    if (unmasked) {\n\t      if (isOwn) {\n\t        value[symToStringTag] = tag;\n\t      } else {\n\t        delete value[symToStringTag];\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Creates an array of the own enumerable symbols of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of symbols.\n\t   */\n\t  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\t\n\t  /**\n\t   * Creates an array of the own and inherited enumerable symbols of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of symbols.\n\t   */\n\t  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n\t    var result = [];\n\t    while (object) {\n\t      arrayPush(result, getSymbols(object));\n\t      object = getPrototype(object);\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * Gets the `toStringTag` of `value`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @returns {string} Returns the `toStringTag`.\n\t   */\n\t  var getTag = baseGetTag;\n\t\n\t  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n\t  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n\t      (Map && getTag(new Map) != mapTag) ||\n\t      (Promise && getTag(Promise.resolve()) != promiseTag) ||\n\t      (Set && getTag(new Set) != setTag) ||\n\t      (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n\t    getTag = function(value) {\n\t      var result = baseGetTag(value),\n\t          Ctor = result == objectTag ? value.constructor : undefined,\n\t          ctorString = Ctor ? toSource(Ctor) : '';\n\t\n\t      if (ctorString) {\n\t        switch (ctorString) {\n\t          case dataViewCtorString: return dataViewTag;\n\t          case mapCtorString: return mapTag;\n\t          case promiseCtorString: return promiseTag;\n\t          case setCtorString: return setTag;\n\t          case weakMapCtorString: return weakMapTag;\n\t        }\n\t      }\n\t      return result;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Checks if `path` exists on `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {Array|string} path The path to check.\n\t   * @param {Function} hasFunc The function to check properties.\n\t   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n\t   */\n\t  function hasPath(object, path, hasFunc) {\n\t    path = castPath(path, object);\n\t\n\t    var index = -1,\n\t        length = path.length,\n\t        result = false;\n\t\n\t    while (++index < length) {\n\t      var key = toKey(path[index]);\n\t      if (!(result = object != null && hasFunc(object, key))) {\n\t        break;\n\t      }\n\t      object = object[key];\n\t    }\n\t    if (result || ++index != length) {\n\t      return result;\n\t    }\n\t    length = object == null ? 0 : object.length;\n\t    return !!length && isLength(length) && isIndex(key, length) &&\n\t      (isArray(object) || isArguments(object));\n\t  }\n\t\n\t  /**\n\t   * Initializes an array clone.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to clone.\n\t   * @returns {Array} Returns the initialized clone.\n\t   */\n\t  function initCloneArray(array) {\n\t    var length = array.length,\n\t        result = array.constructor(length);\n\t\n\t    // Add properties assigned by `RegExp#exec`.\n\t    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n\t      result.index = array.index;\n\t      result.input = array.input;\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Initializes an object clone.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to clone.\n\t   * @returns {Object} Returns the initialized clone.\n\t   */\n\t  function initCloneObject(object) {\n\t    return (typeof object.constructor == 'function' && !isPrototype(object))\n\t      ? baseCreate(getPrototype(object))\n\t      : {};\n\t  }\n\t\n\t  /**\n\t   * Initializes an object clone based on its `toStringTag`.\n\t   *\n\t   * **Note:** This function only supports cloning values with tags of\n\t   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to clone.\n\t   * @param {string} tag The `toStringTag` of the object to clone.\n\t   * @param {Function} cloneFunc The function to clone values.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the initialized clone.\n\t   */\n\t  function initCloneByTag(object, tag, cloneFunc, isDeep) {\n\t    var Ctor = object.constructor;\n\t    switch (tag) {\n\t      case arrayBufferTag:\n\t        return cloneArrayBuffer(object);\n\t\n\t      case boolTag:\n\t      case dateTag:\n\t        return new Ctor(+object);\n\t\n\t      case dataViewTag:\n\t        return cloneDataView(object, isDeep);\n\t\n\t      case float32Tag: case float64Tag:\n\t      case int8Tag: case int16Tag: case int32Tag:\n\t      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n\t        return cloneTypedArray(object, isDeep);\n\t\n\t      case mapTag:\n\t        return cloneMap(object, isDeep, cloneFunc);\n\t\n\t      case numberTag:\n\t      case stringTag:\n\t        return new Ctor(object);\n\t\n\t      case regexpTag:\n\t        return cloneRegExp(object);\n\t\n\t      case setTag:\n\t        return cloneSet(object, isDeep, cloneFunc);\n\t\n\t      case symbolTag:\n\t        return cloneSymbol(object);\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is a flattenable `arguments` object or array.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n\t   */\n\t  function isFlattenable(value) {\n\t    return isArray(value) || isArguments(value) ||\n\t      !!(spreadableSymbol && value && value[spreadableSymbol]);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is a valid array-like index.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t   */\n\t  function isIndex(value, length) {\n\t    length = length == null ? MAX_SAFE_INTEGER : length;\n\t    return !!length &&\n\t      (typeof value == 'number' || reIsUint.test(value)) &&\n\t      (value > -1 && value % 1 == 0 && value < length);\n\t  }\n\t\n\t  /**\n\t   * Checks if the given arguments are from an iteratee call.\n\t   *\n\t   * @private\n\t   * @param {*} value The potential iteratee value argument.\n\t   * @param {*} index The potential iteratee index or key argument.\n\t   * @param {*} object The potential iteratee object argument.\n\t   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n\t   *  else `false`.\n\t   */\n\t  function isIterateeCall(value, index, object) {\n\t    if (!isObject(object)) {\n\t      return false;\n\t    }\n\t    var type = typeof index;\n\t    if (type == 'number'\n\t          ? (isArrayLike(object) && isIndex(index, object.length))\n\t          : (type == 'string' && index in object)\n\t        ) {\n\t      return eq(object[index], value);\n\t    }\n\t    return false;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is a property name and not a property path.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @param {Object} [object] The object to query keys on.\n\t   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n\t   */\n\t  function isKey(value, object) {\n\t    if (isArray(value)) {\n\t      return false;\n\t    }\n\t    var type = typeof value;\n\t    if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n\t        value == null || isSymbol(value)) {\n\t      return true;\n\t    }\n\t    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n\t      (object != null && value in Object(object));\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is suitable for use as unique object key.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n\t   */\n\t  function isKeyable(value) {\n\t    var type = typeof value;\n\t    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n\t      ? (value !== '__proto__')\n\t      : (value === null);\n\t  }\n\t\n\t  /**\n\t   * Checks if `func` has its source masked.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to check.\n\t   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t   */\n\t  function isMasked(func) {\n\t    return !!maskSrcKey && (maskSrcKey in func);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is likely a prototype object.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t   */\n\t  function isPrototype(value) {\n\t    var Ctor = value && value.constructor,\n\t        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\t\n\t    return value === proto;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` if suitable for strict\n\t   *  equality comparisons, else `false`.\n\t   */\n\t  function isStrictComparable(value) {\n\t    return value === value && !isObject(value);\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `matchesProperty` for source values suitable\n\t   * for strict equality comparisons, i.e. `===`.\n\t   *\n\t   * @private\n\t   * @param {string} key The key of the property to get.\n\t   * @param {*} srcValue The value to match.\n\t   * @returns {Function} Returns the new spec function.\n\t   */\n\t  function matchesStrictComparable(key, srcValue) {\n\t    return function(object) {\n\t      if (object == null) {\n\t        return false;\n\t      }\n\t      return object[key] === srcValue &&\n\t        (srcValue !== undefined || (key in Object(object)));\n\t    };\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `_.memoize` which clears the memoized function's\n\t   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to have its output memoized.\n\t   * @returns {Function} Returns the new memoized function.\n\t   */\n\t  function memoizeCapped(func) {\n\t    var result = memoize(func, function(key) {\n\t      if (cache.size === MAX_MEMOIZE_SIZE) {\n\t        cache.clear();\n\t      }\n\t      return key;\n\t    });\n\t\n\t    var cache = result.cache;\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * This function is like\n\t   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t   * except that it includes inherited enumerable properties.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function nativeKeysIn(object) {\n\t    var result = [];\n\t    if (object != null) {\n\t      for (var key in Object(object)) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /**\n\t   * Converts `value` to a string using `Object.prototype.toString`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to convert.\n\t   * @returns {string} Returns the converted string.\n\t   */\n\t  function objectToString(value) {\n\t    return nativeObjectToString.call(value);\n\t  }\n\t\n\t  /**\n\t   * A specialized version of `baseRest` which transforms the rest array.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to apply a rest parameter to.\n\t   * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t   * @param {Function} transform The rest array transform.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function overRest(func, start, transform) {\n\t    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n\t    return function() {\n\t      var args = arguments,\n\t          index = -1,\n\t          length = nativeMax(args.length - start, 0),\n\t          array = Array(length);\n\t\n\t      while (++index < length) {\n\t        array[index] = args[start + index];\n\t      }\n\t      index = -1;\n\t      var otherArgs = Array(start + 1);\n\t      while (++index < start) {\n\t        otherArgs[index] = args[index];\n\t      }\n\t      otherArgs[start] = transform(array);\n\t      return apply(func, this, otherArgs);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Sets the `toString` method of `func` to return `string`.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to modify.\n\t   * @param {Function} string The `toString` result.\n\t   * @returns {Function} Returns `func`.\n\t   */\n\t  var setToString = shortOut(baseSetToString);\n\t\n\t  /**\n\t   * Creates a function that'll short out and invoke `identity` instead\n\t   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n\t   * milliseconds.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to restrict.\n\t   * @returns {Function} Returns the new shortable function.\n\t   */\n\t  function shortOut(func) {\n\t    var count = 0,\n\t        lastCalled = 0;\n\t\n\t    return function() {\n\t      var stamp = nativeNow(),\n\t          remaining = HOT_SPAN - (stamp - lastCalled);\n\t\n\t      lastCalled = stamp;\n\t      if (remaining > 0) {\n\t        if (++count >= HOT_COUNT) {\n\t          return arguments[0];\n\t        }\n\t      } else {\n\t        count = 0;\n\t      }\n\t      return func.apply(undefined, arguments);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Converts `string` to a property path array.\n\t   *\n\t   * @private\n\t   * @param {string} string The string to convert.\n\t   * @returns {Array} Returns the property path array.\n\t   */\n\t  var stringToPath = memoizeCapped(function(string) {\n\t    var result = [];\n\t    if (reLeadingDot.test(string)) {\n\t      result.push('');\n\t    }\n\t    string.replace(rePropName, function(match, number, quote, string) {\n\t      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n\t    });\n\t    return result;\n\t  });\n\t\n\t  /**\n\t   * Converts `value` to a string key if it's not a string or symbol.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to inspect.\n\t   * @returns {string|symbol} Returns the key.\n\t   */\n\t  function toKey(value) {\n\t    if (typeof value == 'string' || isSymbol(value)) {\n\t      return value;\n\t    }\n\t    var result = (value + '');\n\t    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n\t  }\n\t\n\t  /**\n\t   * Converts `func` to its source code.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to convert.\n\t   * @returns {string} Returns the source code.\n\t   */\n\t  function toSource(func) {\n\t    if (func != null) {\n\t      try {\n\t        return funcToString.call(func);\n\t      } catch (e) {}\n\t      try {\n\t        return (func + '');\n\t      } catch (e) {}\n\t    }\n\t    return '';\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Flattens `array` a single level deep.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Array\n\t   * @param {Array} array The array to flatten.\n\t   * @returns {Array} Returns the new flattened array.\n\t   * @example\n\t   *\n\t   * _.flatten([1, [2, [3, [4]], 5]]);\n\t   * // => [1, 2, [3, [4]], 5]\n\t   */\n\t  function flatten(array) {\n\t    var length = array == null ? 0 : array.length;\n\t    return length ? baseFlatten(array, 1) : [];\n\t  }\n\t\n\t  /**\n\t   * This method is like `_.fromPairs` except that it accepts two arrays,\n\t   * one of property identifiers and one of corresponding values.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.4.0\n\t   * @category Array\n\t   * @param {Array} [props=[]] The property identifiers.\n\t   * @param {Array} [values=[]] The property values.\n\t   * @returns {Object} Returns the new object.\n\t   * @example\n\t   *\n\t   * _.zipObject(['a', 'b'], [1, 2]);\n\t   * // => { 'a': 1, 'b': 2 }\n\t   */\n\t  function zipObject(props, values) {\n\t    return baseZipObject(props || [], values || [], assignValue);\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Iterates over elements of `collection`, returning an array of all elements\n\t   * `predicate` returns truthy for. The predicate is invoked with three\n\t   * arguments: (value, index|key, collection).\n\t   *\n\t   * **Note:** Unlike `_.remove`, this method returns a new array.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Collection\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n\t   * @returns {Array} Returns the new filtered array.\n\t   * @see _.reject\n\t   * @example\n\t   *\n\t   * var users = [\n\t   *   { 'user': 'barney', 'age': 36, 'active': true },\n\t   *   { 'user': 'fred',   'age': 40, 'active': false }\n\t   * ];\n\t   *\n\t   * _.filter(users, function(o) { return !o.active; });\n\t   * // => objects for ['fred']\n\t   *\n\t   * // The `_.matches` iteratee shorthand.\n\t   * _.filter(users, { 'age': 36, 'active': true });\n\t   * // => objects for ['barney']\n\t   *\n\t   * // The `_.matchesProperty` iteratee shorthand.\n\t   * _.filter(users, ['active', false]);\n\t   * // => objects for ['fred']\n\t   *\n\t   * // The `_.property` iteratee shorthand.\n\t   * _.filter(users, 'active');\n\t   * // => objects for ['barney']\n\t   */\n\t  function filter(collection, predicate) {\n\t    var func = isArray(collection) ? arrayFilter : baseFilter;\n\t    return func(collection, getIteratee(predicate, 3));\n\t  }\n\t\n\t  /**\n\t   * Iterates over elements of `collection` and invokes `iteratee` for each element.\n\t   * The iteratee is invoked with three arguments: (value, index|key, collection).\n\t   * Iteratee functions may exit iteration early by explicitly returning `false`.\n\t   *\n\t   * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n\t   * property are iterated like arrays. To avoid this behavior use `_.forIn`\n\t   * or `_.forOwn` for object iteration.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @alias each\n\t   * @category Collection\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t   * @returns {Array|Object} Returns `collection`.\n\t   * @see _.forEachRight\n\t   * @example\n\t   *\n\t   * _.forEach([1, 2], function(value) {\n\t   *   console.log(value);\n\t   * });\n\t   * // => Logs `1` then `2`.\n\t   *\n\t   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n\t   *   console.log(key);\n\t   * });\n\t   * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n\t   */\n\t  function forEach(collection, iteratee) {\n\t    var func = isArray(collection) ? arrayEach : baseEach;\n\t    return func(collection, getIteratee(iteratee, 3));\n\t  }\n\t\n\t  /**\n\t   * Creates an array of values by running each element in `collection` thru\n\t   * `iteratee`. The iteratee is invoked with three arguments:\n\t   * (value, index|key, collection).\n\t   *\n\t   * Many lodash methods are guarded to work as iteratees for methods like\n\t   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\t   *\n\t   * The guarded methods are:\n\t   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n\t   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n\t   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n\t   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Collection\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t   * @returns {Array} Returns the new mapped array.\n\t   * @example\n\t   *\n\t   * function square(n) {\n\t   *   return n * n;\n\t   * }\n\t   *\n\t   * _.map([4, 8], square);\n\t   * // => [16, 64]\n\t   *\n\t   * _.map({ 'a': 4, 'b': 8 }, square);\n\t   * // => [16, 64] (iteration order is not guaranteed)\n\t   *\n\t   * var users = [\n\t   *   { 'user': 'barney' },\n\t   *   { 'user': 'fred' }\n\t   * ];\n\t   *\n\t   * // The `_.property` iteratee shorthand.\n\t   * _.map(users, 'user');\n\t   * // => ['barney', 'fred']\n\t   */\n\t  function map(collection, iteratee) {\n\t    var func = isArray(collection) ? arrayMap : baseMap;\n\t    return func(collection, getIteratee(iteratee, 3));\n\t  }\n\t\n\t  /**\n\t   * Reduces `collection` to a value which is the accumulated result of running\n\t   * each element in `collection` thru `iteratee`, where each successive\n\t   * invocation is supplied the return value of the previous. If `accumulator`\n\t   * is not given, the first element of `collection` is used as the initial\n\t   * value. The iteratee is invoked with four arguments:\n\t   * (accumulator, value, index|key, collection).\n\t   *\n\t   * Many lodash methods are guarded to work as iteratees for methods like\n\t   * `_.reduce`, `_.reduceRight`, and `_.transform`.\n\t   *\n\t   * The guarded methods are:\n\t   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n\t   * and `sortBy`\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Collection\n\t   * @param {Array|Object} collection The collection to iterate over.\n\t   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n\t   * @param {*} [accumulator] The initial value.\n\t   * @returns {*} Returns the accumulated value.\n\t   * @see _.reduceRight\n\t   * @example\n\t   *\n\t   * _.reduce([1, 2], function(sum, n) {\n\t   *   return sum + n;\n\t   * }, 0);\n\t   * // => 3\n\t   *\n\t   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n\t   *   (result[value] || (result[value] = [])).push(key);\n\t   *   return result;\n\t   * }, {});\n\t   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n\t   */\n\t  function reduce(collection, iteratee, accumulator) {\n\t    var func = isArray(collection) ? arrayReduce : baseReduce,\n\t        initAccum = arguments.length < 3;\n\t\n\t    return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a function that memoizes the result of `func`. If `resolver` is\n\t   * provided, it determines the cache key for storing the result based on the\n\t   * arguments provided to the memoized function. By default, the first argument\n\t   * provided to the memoized function is used as the map cache key. The `func`\n\t   * is invoked with the `this` binding of the memoized function.\n\t   *\n\t   * **Note:** The cache is exposed as the `cache` property on the memoized\n\t   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n\t   * constructor with one whose instances implement the\n\t   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n\t   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Function\n\t   * @param {Function} func The function to have its output memoized.\n\t   * @param {Function} [resolver] The function to resolve the cache key.\n\t   * @returns {Function} Returns the new memoized function.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1, 'b': 2 };\n\t   * var other = { 'c': 3, 'd': 4 };\n\t   *\n\t   * var values = _.memoize(_.values);\n\t   * values(object);\n\t   * // => [1, 2]\n\t   *\n\t   * values(other);\n\t   * // => [3, 4]\n\t   *\n\t   * object.a = 2;\n\t   * values(object);\n\t   * // => [1, 2]\n\t   *\n\t   * // Modify the result cache.\n\t   * values.cache.set(object, ['a', 'b']);\n\t   * values(object);\n\t   * // => ['a', 'b']\n\t   *\n\t   * // Replace `_.memoize.Cache`.\n\t   * _.memoize.Cache = WeakMap;\n\t   */\n\t  function memoize(func, resolver) {\n\t    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n\t      throw new TypeError(FUNC_ERROR_TEXT);\n\t    }\n\t    var memoized = function() {\n\t      var args = arguments,\n\t          key = resolver ? resolver.apply(this, args) : args[0],\n\t          cache = memoized.cache;\n\t\n\t      if (cache.has(key)) {\n\t        return cache.get(key);\n\t      }\n\t      var result = func.apply(this, args);\n\t      memoized.cache = cache.set(key, result) || cache;\n\t      return result;\n\t    };\n\t    memoized.cache = new (memoize.Cache || MapCache);\n\t    return memoized;\n\t  }\n\t\n\t  // Expose `MapCache`.\n\t  memoize.Cache = MapCache;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Performs a\n\t   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t   * comparison between two values to determine if they are equivalent.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to compare.\n\t   * @param {*} other The other value to compare.\n\t   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1 };\n\t   * var other = { 'a': 1 };\n\t   *\n\t   * _.eq(object, object);\n\t   * // => true\n\t   *\n\t   * _.eq(object, other);\n\t   * // => false\n\t   *\n\t   * _.eq('a', 'a');\n\t   * // => true\n\t   *\n\t   * _.eq('a', Object('a'));\n\t   * // => false\n\t   *\n\t   * _.eq(NaN, NaN);\n\t   * // => true\n\t   */\n\t  function eq(value, other) {\n\t    return value === other || (value !== value && other !== other);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is likely an `arguments` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t   *  else `false`.\n\t   * @example\n\t   *\n\t   * _.isArguments(function() { return arguments; }());\n\t   * // => true\n\t   *\n\t   * _.isArguments([1, 2, 3]);\n\t   * // => false\n\t   */\n\t  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n\t    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n\t      !propertyIsEnumerable.call(value, 'callee');\n\t  };\n\t\n\t  /**\n\t   * Checks if `value` is classified as an `Array` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t   * @example\n\t   *\n\t   * _.isArray([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isArray(document.body.children);\n\t   * // => false\n\t   *\n\t   * _.isArray('abc');\n\t   * // => false\n\t   *\n\t   * _.isArray(_.noop);\n\t   * // => false\n\t   */\n\t  var isArray = Array.isArray;\n\t\n\t  /**\n\t   * Checks if `value` is array-like. A value is considered array-like if it's\n\t   * not a function and has a `value.length` that's an integer greater than or\n\t   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t   * @example\n\t   *\n\t   * _.isArrayLike([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isArrayLike(document.body.children);\n\t   * // => true\n\t   *\n\t   * _.isArrayLike('abc');\n\t   * // => true\n\t   *\n\t   * _.isArrayLike(_.noop);\n\t   * // => false\n\t   */\n\t  function isArrayLike(value) {\n\t    return value != null && isLength(value.length) && !isFunction(value);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is a buffer.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.3.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n\t   * @example\n\t   *\n\t   * _.isBuffer(new Buffer(2));\n\t   * // => true\n\t   *\n\t   * _.isBuffer(new Uint8Array(2));\n\t   * // => false\n\t   */\n\t  var isBuffer = nativeIsBuffer || stubFalse;\n\t\n\t  /**\n\t   * Checks if `value` is an empty object, collection, map, or set.\n\t   *\n\t   * Objects are considered empty if they have no own enumerable string keyed\n\t   * properties.\n\t   *\n\t   * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n\t   * jQuery-like collections are considered empty if they have a `length` of `0`.\n\t   * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n\t   * @example\n\t   *\n\t   * _.isEmpty(null);\n\t   * // => true\n\t   *\n\t   * _.isEmpty(true);\n\t   * // => true\n\t   *\n\t   * _.isEmpty(1);\n\t   * // => true\n\t   *\n\t   * _.isEmpty([1, 2, 3]);\n\t   * // => false\n\t   *\n\t   * _.isEmpty({ 'a': 1 });\n\t   * // => false\n\t   */\n\t  function isEmpty(value) {\n\t    if (value == null) {\n\t      return true;\n\t    }\n\t    if (isArrayLike(value) &&\n\t        (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n\t          isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n\t      return !value.length;\n\t    }\n\t    var tag = getTag(value);\n\t    if (tag == mapTag || tag == setTag) {\n\t      return !value.size;\n\t    }\n\t    if (isPrototype(value)) {\n\t      return !baseKeys(value).length;\n\t    }\n\t    for (var key in value) {\n\t      if (hasOwnProperty.call(value, key)) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is classified as a `Function` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t   * @example\n\t   *\n\t   * _.isFunction(_);\n\t   * // => true\n\t   *\n\t   * _.isFunction(/abc/);\n\t   * // => false\n\t   */\n\t  function isFunction(value) {\n\t    if (!isObject(value)) {\n\t      return false;\n\t    }\n\t    // The use of `Object#toString` avoids issues with the `typeof` operator\n\t    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\t    var tag = baseGetTag(value);\n\t    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is a valid array-like length.\n\t   *\n\t   * **Note:** This method is loosely based on\n\t   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t   * @example\n\t   *\n\t   * _.isLength(3);\n\t   * // => true\n\t   *\n\t   * _.isLength(Number.MIN_VALUE);\n\t   * // => false\n\t   *\n\t   * _.isLength(Infinity);\n\t   * // => false\n\t   *\n\t   * _.isLength('3');\n\t   * // => false\n\t   */\n\t  function isLength(value) {\n\t    return typeof value == 'number' &&\n\t      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is the\n\t   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t   * @example\n\t   *\n\t   * _.isObject({});\n\t   * // => true\n\t   *\n\t   * _.isObject([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isObject(_.noop);\n\t   * // => true\n\t   *\n\t   * _.isObject(null);\n\t   * // => false\n\t   */\n\t  function isObject(value) {\n\t    var type = typeof value;\n\t    return value != null && (type == 'object' || type == 'function');\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t   * and has a `typeof` result of \"object\".\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t   * @example\n\t   *\n\t   * _.isObjectLike({});\n\t   * // => true\n\t   *\n\t   * _.isObjectLike([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isObjectLike(_.noop);\n\t   * // => false\n\t   *\n\t   * _.isObjectLike(null);\n\t   * // => false\n\t   */\n\t  function isObjectLike(value) {\n\t    return value != null && typeof value == 'object';\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is classified as a `String` primitive or object.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n\t   * @example\n\t   *\n\t   * _.isString('abc');\n\t   * // => true\n\t   *\n\t   * _.isString(1);\n\t   * // => false\n\t   */\n\t  function isString(value) {\n\t    return typeof value == 'string' ||\n\t      (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is classified as a `Symbol` primitive or object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t   * @example\n\t   *\n\t   * _.isSymbol(Symbol.iterator);\n\t   * // => true\n\t   *\n\t   * _.isSymbol('abc');\n\t   * // => false\n\t   */\n\t  function isSymbol(value) {\n\t    return typeof value == 'symbol' ||\n\t      (isObjectLike(value) && baseGetTag(value) == symbolTag);\n\t  }\n\t\n\t  /**\n\t   * Checks if `value` is classified as a typed array.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t   * @example\n\t   *\n\t   * _.isTypedArray(new Uint8Array);\n\t   * // => true\n\t   *\n\t   * _.isTypedArray([]);\n\t   * // => false\n\t   */\n\t  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\t\n\t  /**\n\t   * Converts `value` to an array.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Lang\n\t   * @param {*} value The value to convert.\n\t   * @returns {Array} Returns the converted array.\n\t   * @example\n\t   *\n\t   * _.toArray({ 'a': 1, 'b': 2 });\n\t   * // => [1, 2]\n\t   *\n\t   * _.toArray('abc');\n\t   * // => ['a', 'b', 'c']\n\t   *\n\t   * _.toArray(1);\n\t   * // => []\n\t   *\n\t   * _.toArray(null);\n\t   * // => []\n\t   */\n\t  function toArray(value) {\n\t    if (!value) {\n\t      return [];\n\t    }\n\t    if (isArrayLike(value)) {\n\t      return isString(value) ? stringToArray(value) : copyArray(value);\n\t    }\n\t    if (symIterator && value[symIterator]) {\n\t      return iteratorToArray(value[symIterator]());\n\t    }\n\t    var tag = getTag(value),\n\t        func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\t\n\t    return func(value);\n\t  }\n\t\n\t  /**\n\t   * Converts `value` to a string. An empty string is returned for `null`\n\t   * and `undefined` values. The sign of `-0` is preserved.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to convert.\n\t   * @returns {string} Returns the converted string.\n\t   * @example\n\t   *\n\t   * _.toString(null);\n\t   * // => ''\n\t   *\n\t   * _.toString(-0);\n\t   * // => '-0'\n\t   *\n\t   * _.toString([1, 2, 3]);\n\t   * // => '1,2,3'\n\t   */\n\t  function toString(value) {\n\t    return value == null ? '' : baseToString(value);\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * This method is like `_.assign` except that it iterates over own and\n\t   * inherited source properties.\n\t   *\n\t   * **Note:** This method mutates `object`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @alias extend\n\t   * @category Object\n\t   * @param {Object} object The destination object.\n\t   * @param {...Object} [sources] The source objects.\n\t   * @returns {Object} Returns `object`.\n\t   * @see _.assign\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   * }\n\t   *\n\t   * function Bar() {\n\t   *   this.c = 3;\n\t   * }\n\t   *\n\t   * Foo.prototype.b = 2;\n\t   * Bar.prototype.d = 4;\n\t   *\n\t   * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n\t   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n\t   */\n\t  var assignIn = createAssigner(function(object, source) {\n\t    copyObject(source, keysIn(source), object);\n\t  });\n\t\n\t  /**\n\t   * This method is like `_.assignIn` except that it accepts `customizer`\n\t   * which is invoked to produce the assigned values. If `customizer` returns\n\t   * `undefined`, assignment is handled by the method instead. The `customizer`\n\t   * is invoked with five arguments: (objValue, srcValue, key, object, source).\n\t   *\n\t   * **Note:** This method mutates `object`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @alias extendWith\n\t   * @category Object\n\t   * @param {Object} object The destination object.\n\t   * @param {...Object} sources The source objects.\n\t   * @param {Function} [customizer] The function to customize assigned values.\n\t   * @returns {Object} Returns `object`.\n\t   * @see _.assignWith\n\t   * @example\n\t   *\n\t   * function customizer(objValue, srcValue) {\n\t   *   return _.isUndefined(objValue) ? srcValue : objValue;\n\t   * }\n\t   *\n\t   * var defaults = _.partialRight(_.assignInWith, customizer);\n\t   *\n\t   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n\t   * // => { 'a': 1, 'b': 2 }\n\t   */\n\t  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n\t    copyObject(source, keysIn(source), object, customizer);\n\t  });\n\t\n\t  /**\n\t   * Assigns own and inherited enumerable string keyed properties of source\n\t   * objects to the destination object for all destination properties that\n\t   * resolve to `undefined`. Source objects are applied from left to right.\n\t   * Once a property is set, additional values of the same property are ignored.\n\t   *\n\t   * **Note:** This method mutates `object`.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Object\n\t   * @param {Object} object The destination object.\n\t   * @param {...Object} [sources] The source objects.\n\t   * @returns {Object} Returns `object`.\n\t   * @see _.defaultsDeep\n\t   * @example\n\t   *\n\t   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n\t   * // => { 'a': 1, 'b': 2 }\n\t   */\n\t  var defaults = baseRest(function(args) {\n\t    args.push(undefined, assignInDefaults);\n\t    return apply(assignInWith, undefined, args);\n\t  });\n\t\n\t  /**\n\t   * Creates an array of function property names from own and inherited\n\t   * enumerable properties of `object`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Object\n\t   * @param {Object} object The object to inspect.\n\t   * @returns {Array} Returns the function names.\n\t   * @see _.functions\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = _.constant('a');\n\t   *   this.b = _.constant('b');\n\t   * }\n\t   *\n\t   * Foo.prototype.c = _.constant('c');\n\t   *\n\t   * _.functionsIn(new Foo);\n\t   * // => ['a', 'b', 'c']\n\t   */\n\t  function functionsIn(object) {\n\t    return object == null ? [] : baseFunctions(object, keysIn(object));\n\t  }\n\t\n\t  /**\n\t   * Gets the value at `path` of `object`. If the resolved value is\n\t   * `undefined`, the `defaultValue` is returned in its place.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.7.0\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @param {Array|string} path The path of the property to get.\n\t   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n\t   * @returns {*} Returns the resolved value.\n\t   * @example\n\t   *\n\t   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\t   *\n\t   * _.get(object, 'a[0].b.c');\n\t   * // => 3\n\t   *\n\t   * _.get(object, ['a', '0', 'b', 'c']);\n\t   * // => 3\n\t   *\n\t   * _.get(object, 'a.b.c', 'default');\n\t   * // => 'default'\n\t   */\n\t  function get(object, path, defaultValue) {\n\t    var result = object == null ? undefined : baseGet(object, path);\n\t    return result === undefined ? defaultValue : result;\n\t  }\n\t\n\t  /**\n\t   * Checks if `path` is a direct or inherited property of `object`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @param {Array|string} path The path to check.\n\t   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n\t   * @example\n\t   *\n\t   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\t   *\n\t   * _.hasIn(object, 'a');\n\t   * // => true\n\t   *\n\t   * _.hasIn(object, 'a.b');\n\t   * // => true\n\t   *\n\t   * _.hasIn(object, ['a', 'b']);\n\t   * // => true\n\t   *\n\t   * _.hasIn(object, 'b');\n\t   * // => false\n\t   */\n\t  function hasIn(object, path) {\n\t    return object != null && hasPath(object, path, baseHasIn);\n\t  }\n\t\n\t  /**\n\t   * Creates an array of the own enumerable property names of `object`.\n\t   *\n\t   * **Note:** Non-object values are coerced to objects. See the\n\t   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t   * for more details.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   *   this.b = 2;\n\t   * }\n\t   *\n\t   * Foo.prototype.c = 3;\n\t   *\n\t   * _.keys(new Foo);\n\t   * // => ['a', 'b'] (iteration order is not guaranteed)\n\t   *\n\t   * _.keys('hi');\n\t   * // => ['0', '1']\n\t   */\n\t  function keys(object) {\n\t    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n\t  }\n\t\n\t  /**\n\t   * Creates an array of the own and inherited enumerable property names of `object`.\n\t   *\n\t   * **Note:** Non-object values are coerced to objects.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.0.0\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   *   this.b = 2;\n\t   * }\n\t   *\n\t   * Foo.prototype.c = 3;\n\t   *\n\t   * _.keysIn(new Foo);\n\t   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t   */\n\t  function keysIn(object) {\n\t    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n\t  }\n\t\n\t  /**\n\t   * Creates an object composed of the picked `object` properties.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Object\n\t   * @param {Object} object The source object.\n\t   * @param {...(string|string[])} [paths] The property paths to pick.\n\t   * @returns {Object} Returns the new object.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1, 'b': '2', 'c': 3 };\n\t   *\n\t   * _.pick(object, ['a', 'c']);\n\t   * // => { 'a': 1, 'c': 3 }\n\t   */\n\t  var pick = flatRest(function(object, paths) {\n\t    return object == null ? {} : basePick(object, paths);\n\t  });\n\t\n\t  /**\n\t   * Creates an array of the own enumerable string keyed property values of `object`.\n\t   *\n\t   * **Note:** Non-object values are coerced to objects.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property values.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   *   this.b = 2;\n\t   * }\n\t   *\n\t   * Foo.prototype.c = 3;\n\t   *\n\t   * _.values(new Foo);\n\t   * // => [1, 2] (iteration order is not guaranteed)\n\t   *\n\t   * _.values('hi');\n\t   * // => ['h', 'i']\n\t   */\n\t  function values(object) {\n\t    return object == null ? [] : baseValues(object, keys(object));\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * Creates a function that returns `value`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 2.4.0\n\t   * @category Util\n\t   * @param {*} value The value to return from the new function.\n\t   * @returns {Function} Returns the new constant function.\n\t   * @example\n\t   *\n\t   * var objects = _.times(2, _.constant({ 'a': 1 }));\n\t   *\n\t   * console.log(objects);\n\t   * // => [{ 'a': 1 }, { 'a': 1 }]\n\t   *\n\t   * console.log(objects[0] === objects[1]);\n\t   * // => true\n\t   */\n\t  function constant(value) {\n\t    return function() {\n\t      return value;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * This method returns the first argument it receives.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Util\n\t   * @param {*} value Any value.\n\t   * @returns {*} Returns `value`.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1 };\n\t   *\n\t   * console.log(_.identity(object) === object);\n\t   * // => true\n\t   */\n\t  function identity(value) {\n\t    return value;\n\t  }\n\t\n\t  /**\n\t   * Creates a function that invokes `func` with the arguments of the created\n\t   * function. If `func` is a property name, the created function returns the\n\t   * property value for a given element. If `func` is an array or object, the\n\t   * created function returns `true` for elements that contain the equivalent\n\t   * source properties, otherwise it returns `false`.\n\t   *\n\t   * @static\n\t   * @since 4.0.0\n\t   * @memberOf _\n\t   * @category Util\n\t   * @param {*} [func=_.identity] The value to convert to a callback.\n\t   * @returns {Function} Returns the callback.\n\t   * @example\n\t   *\n\t   * var users = [\n\t   *   { 'user': 'barney', 'age': 36, 'active': true },\n\t   *   { 'user': 'fred',   'age': 40, 'active': false }\n\t   * ];\n\t   *\n\t   * // The `_.matches` iteratee shorthand.\n\t   * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n\t   * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\t   *\n\t   * // The `_.matchesProperty` iteratee shorthand.\n\t   * _.filter(users, _.iteratee(['user', 'fred']));\n\t   * // => [{ 'user': 'fred', 'age': 40 }]\n\t   *\n\t   * // The `_.property` iteratee shorthand.\n\t   * _.map(users, _.iteratee('user'));\n\t   * // => ['barney', 'fred']\n\t   *\n\t   * // Create custom iteratee shorthands.\n\t   * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n\t   *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n\t   *     return func.test(string);\n\t   *   };\n\t   * });\n\t   *\n\t   * _.filter(['abc', 'def'], /ef/);\n\t   * // => ['def']\n\t   */\n\t  function iteratee(func) {\n\t    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n\t  }\n\t\n\t  /**\n\t   * This method returns `undefined`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 2.3.0\n\t   * @category Util\n\t   * @example\n\t   *\n\t   * _.times(2, _.noop);\n\t   * // => [undefined, undefined]\n\t   */\n\t  function noop() {\n\t    // No operation performed.\n\t  }\n\t\n\t  /**\n\t   * Creates a function that returns the value at `path` of a given object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 2.4.0\n\t   * @category Util\n\t   * @param {Array|string} path The path of the property to get.\n\t   * @returns {Function} Returns the new accessor function.\n\t   * @example\n\t   *\n\t   * var objects = [\n\t   *   { 'a': { 'b': 2 } },\n\t   *   { 'a': { 'b': 1 } }\n\t   * ];\n\t   *\n\t   * _.map(objects, _.property('a.b'));\n\t   * // => [2, 1]\n\t   *\n\t   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n\t   * // => [1, 2]\n\t   */\n\t  function property(path) {\n\t    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n\t  }\n\t\n\t  /**\n\t   * This method returns a new empty array.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.13.0\n\t   * @category Util\n\t   * @returns {Array} Returns the new empty array.\n\t   * @example\n\t   *\n\t   * var arrays = _.times(2, _.stubArray);\n\t   *\n\t   * console.log(arrays);\n\t   * // => [[], []]\n\t   *\n\t   * console.log(arrays[0] === arrays[1]);\n\t   * // => false\n\t   */\n\t  function stubArray() {\n\t    return [];\n\t  }\n\t\n\t  /**\n\t   * This method returns `false`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.13.0\n\t   * @category Util\n\t   * @returns {boolean} Returns `false`.\n\t   * @example\n\t   *\n\t   * _.times(2, _.stubFalse);\n\t   * // => [false, false]\n\t   */\n\t  function stubFalse() {\n\t    return false;\n\t  }\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  // Add methods that return wrapped values in chain sequences.\n\t  lodash.assignIn = assignIn;\n\t  lodash.assignInWith = assignInWith;\n\t  lodash.constant = constant;\n\t  lodash.defaults = defaults;\n\t  lodash.filter = filter;\n\t  lodash.flatten = flatten;\n\t  lodash.functionsIn = functionsIn;\n\t  lodash.iteratee = iteratee;\n\t  lodash.keys = keys;\n\t  lodash.keysIn = keysIn;\n\t  lodash.map = map;\n\t  lodash.memoize = memoize;\n\t  lodash.pick = pick;\n\t  lodash.property = property;\n\t  lodash.toArray = toArray;\n\t  lodash.values = values;\n\t  lodash.zipObject = zipObject;\n\t\n\t  // Add aliases.\n\t  lodash.extend = assignIn;\n\t  lodash.extendWith = assignInWith;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  // Add methods that return unwrapped values in chain sequences.\n\t  lodash.eq = eq;\n\t  lodash.forEach = forEach;\n\t  lodash.get = get;\n\t  lodash.hasIn = hasIn;\n\t  lodash.identity = identity;\n\t  lodash.isArguments = isArguments;\n\t  lodash.isArray = isArray;\n\t  lodash.isArrayLike = isArrayLike;\n\t  lodash.isBuffer = isBuffer;\n\t  lodash.isEmpty = isEmpty;\n\t  lodash.isFunction = isFunction;\n\t  lodash.isLength = isLength;\n\t  lodash.isObject = isObject;\n\t  lodash.isObjectLike = isObjectLike;\n\t  lodash.isString = isString;\n\t  lodash.isSymbol = isSymbol;\n\t  lodash.isTypedArray = isTypedArray;\n\t  lodash.stubArray = stubArray;\n\t  lodash.stubFalse = stubFalse;\n\t  lodash.noop = noop;\n\t  lodash.reduce = reduce;\n\t  lodash.toString = toString;\n\t\n\t  // Add aliases.\n\t  lodash.each = forEach;\n\t\n\t  /*------------------------------------------------------------------------*/\n\t\n\t  /**\n\t   * The semantic version number.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @type {string}\n\t   */\n\t  lodash.VERSION = VERSION;\n\t\n\t  /*--------------------------------------------------------------------------*/\n\t\n\t  // Some AMD build optimizers, like r.js, check for condition patterns like:\n\t  if (true) {\n\t    // Expose Lodash on the global object to prevent errors when Lodash is\n\t    // loaded by a script tag in the presence of an AMD loader.\n\t    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n\t    // Use `_.noConflict` to remove Lodash from the global object.\n\t    root._ = lodash;\n\t\n\t    // Define as an anonymous module so, through path mapping, it can be\n\t    // referenced as the \"underscore\" module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return lodash;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  }\n\t  // Check for `exports` after `define` in case a build optimizer adds it.\n\t  else if (freeModule) {\n\t    // Export for Node.js.\n\t    (freeModule.exports = lodash)._ = lodash;\n\t    // Export for CommonJS support.\n\t    freeExports._ = lodash;\n\t  }\n\t  else {\n\t    // Export to the global object.\n\t    root._ = lodash;\n\t  }\n\t}.call(this));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)(module)))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar globals = __webpack_require__(1);\n\tvar errors = __webpack_require__(6);\n\t\n\tvar newq = module.exports = function(resolver) {\n\t  if (!_.isFunction(resolver))\n\t    throw new Error('resolver should be a function');\n\t\n\t  var deferred = newq.defer();\n\t  try {\n\t    resolver(deferred.resolve, deferred.reject);\n\t  }\n\t  catch (e) {\n\t    deferred.reject(e);\n\t  }\n\t  return deferred.promise;\n\t};\n\t\n\t_.extend(newq, {\n\t  // Methods & aliases\n\t  all: __webpack_require__(7),\n\t  any: __webpack_require__(25),\n\t  bind: __webpack_require__(26),\n\t  defer: __webpack_require__(27),\n\t  each: __webpack_require__(28),\n\t  filter: __webpack_require__(31),\n\t  map: __webpack_require__(32),\n\t  join: __webpack_require__(33),\n\t  method: __webpack_require__(34),\n\t  props: __webpack_require__(36),\n\t  reduce: __webpack_require__(37),\n\t  reject: __webpack_require__(38),\n\t  resolve: __webpack_require__(40),\n\t  some: __webpack_require__(41),\n\t  when: __webpack_require__(42),\n\t\n\t  // Errors\n\t  AggregateError: errors.AggregateError,\n\t  TimeoutError: errors.TimeoutError\n\t});\n\t\n\tif (globals.$options.compatibilityAliases) {\n\t  _.extend(newq, {\n\t    attempt: __webpack_require__(35)\n\t  });\n\t}\n\t\n\tif (!globals.$options.disableES5Methods) {\n\t  _.extend(newq, {\n\t    'try': __webpack_require__(35)\n\t  });\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar NewQError = module.exports.NewQError = function NewQError(message) {\n\t  this.name = this.constructor.name;\n\t  Error.apply(this, arguments);\n\t  this.message = message;\n\t  if (Error.captureStackTrace)\n\t    Error.captureStackTrace(this, this.constructor);\n\t  else\n\t    this.stack = (new Error()).stack;\n\t};\n\t\n\tNewQError.prototype.toString = function() {\n\t    return this.stack.toString();\n\t};\n\t\n\tNewQError.subError = function subError(SubError, Parent) {\n\t  Parent = Parent || NewQError;\n\t\n\t  function F() {}\n\t  F.prototype = Parent.prototype;\n\t  SubError.prototype = new F();\n\t  SubError.prototype.constructor = SubError;\n\t\n\t  if (SubError.subError)\n\t    return;\n\t\n\t  SubError.subError = function subError(SubSubError) {\n\t    NewQError.subError(SubSubError, SubError);\n\t  };\n\t};\n\t\n\tNewQError.subError(NewQError, Error);\n\t\n\tvar AggregateError = module.exports.AggregateError = function AggregateError() {\n\t  NewQError.apply(this, arguments);\n\t};\n\tNewQError.subError(AggregateError);\n\t\n\tvar TimeoutError = module.exports.TimeoutError = function TimeoutError() {\n\t  NewQError.apply(this, arguments);\n\t};\n\tNewQError.subError(TimeoutError);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar decorate = __webpack_require__(8);\n\tvar globals = __webpack_require__(1);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(promises) {\n\t  if (!_.isArray(promises))\n\t    return newq.props(promises);\n\t\n\t  promises = _.map(promises, function(promise) {\n\t    return newq.when(promise);\n\t  });\n\t\n\t  return decorate(globals.$delegate.all(promises));\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar globals = __webpack_require__(1);\n\tvar callNewQ = __webpack_require__(9);\n\tvar defineProperty = __webpack_require__(11);\n\t\n\tvar aliases = {\n\t  'catch': 'caught',\n\t  'finally': 'lastly',\n\t  'return': ['thenReturn', 'returns'],\n\t  'throw': ['thenThrow']\n\t};\n\t\n\tfunction Promise($qPromise, parent) {\n\t  defineProperty(this, '$$state', $qPromise.$$state);\n\t\n\t  _.each(_.functionsIn($qPromise), function(name) {\n\t    defineProperty(this, '$$' + name, $qPromise[name]);\n\t  }.bind(this));\n\t\n\t  if (parent && parent.$$boundTo)\n\t    defineProperty(this, '$$boundTo', parent.$$boundTo);\n\t\n\t  defineProperty(this, '$$arrayListeners', []);\n\t\n\t  this.then = $qPromise.then = this.then.bind(this);\n\t}\n\t\n\tmodule.exports = function decorate($qPromise, parent) {\n\t  return new Promise($qPromise, parent);\n\t};\n\t\n\tPromise.prototype = {\n\t  // call newQ.all if unsynced, does nothing otherwise\n\t  all: callNewQ('all'),\n\t  any: callNewQ('any'),\n\t  bind: __webpack_require__(12),\n\t  call: __webpack_require__(13),\n\t  'catch': __webpack_require__(14),\n\t  delay: __webpack_require__(15),\n\t  done: __webpack_require__(16),\n\t  each: callNewQ('each'),\n\t  filter: callNewQ('filter'),\n\t  'finally': function() {\n\t    return this.$$finally.apply(this, arguments);\n\t  },\n\t  get: __webpack_require__(17),\n\t  map: callNewQ('map'),\n\t  nodeify: __webpack_require__(18),\n\t  props: callNewQ('props'),\n\t  reduce: callNewQ('reduce'),\n\t  'return': __webpack_require__(19),\n\t  some: callNewQ('some'),\n\t  spread: __webpack_require__(20),\n\t  tap: __webpack_require__(21),\n\t  then: __webpack_require__(22),\n\t  'throw': __webpack_require__(23),\n\t  timeout: __webpack_require__(24),\n\t\n\t  constructor: Promise\n\t};\n\t\n\tdefineProperty(Promise.prototype, '$$callArrayListeners', function(array) {\n\t  _.each(this.$$arrayListeners, function(listener) {\n\t    listener(array);\n\t  });\n\t});\n\t\n\t_.each(aliases, function(targets, method) {\n\t  if (!_.isArray(targets))\n\t    targets = [targets];\n\t\n\t  if (globals.$options.compatibilityAliases) {\n\t    _.each(targets, function(target) {\n\t      Promise.prototype[target] = Promise.prototype[method];\n\t    });\n\t  }\n\t\n\t  if (globals.$options.disableES5Methods)\n\t    delete Promise.prototype[method];\n\t});\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar bindMethods = __webpack_require__(10);\n\tvar newQ = __webpack_require__(5);\n\tvar defineProperty = __webpack_require__(11);\n\t\n\tmodule.exports = function callNewQ(method) {\n\t  /* jshint -W040 */\n\t  function execute(args, arr) {\n\t    var res = newQ[method].apply(null, [arr].concat(args));\n\t    defineProperty(res, '$$boundTo', this.$$boundTo);\n\t    return res;\n\t  }\n\t  /* jshint +W040 */\n\t\n\t  return function() {\n\t    var args = bindMethods.call(this, arguments);\n\t\n\t    // chain if not synced\n\t    if (this.$$unsynced) {\n\t      // create new promise with next($$unsynced, args…)\n\t      return execute.call(this, args, this.$$unsynced);\n\t    }\n\t\n\t    var then = this.then(function(val) {\n\t      if (then.$$promiseResult)\n\t        return then.$$promiseResult;\n\t\n\t      var res = execute.call(this, args, val);\n\t\n\t      if (then.$$arrayListeners.length && res.$$unsynced)\n\t        then.$$callArrayListeners(res.$$unsynced);\n\t\n\t      return res;\n\t    }.bind(this));\n\t\n\t    this.$$arrayListeners.push(function(array) {\n\t      defineProperty(this, '$$promiseResult', execute.call(this, args, array));\n\t\n\t      if (then.$$arrayListeners.length && this.$$promiseResult.$$unsynced)\n\t        then.$$callArrayListeners(this.$$promiseResult.$$unsynced);\n\t    }.bind(this));\n\t\n\t    return then;\n\t  };\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\t\n\tmodule.exports = function bindMethods(array) {\n\t  return _.map(array, function(arg) {\n\t    if (!_.isFunction(arg))\n\t      return arg;\n\t    return arg.bind(this.$$boundTo || this);\n\t  }.bind(this));\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function defineProperty(obj, name, value) {\n\t  if (Object.defineProperty) {\n\t    try {\n\t      Object.defineProperty(obj, name, {\n\t        value: value\n\t      });\n\t    }\n\t    catch (e) {}\n\t  }\n\t\n\t  if (obj[name] !== value)\n\t    obj[name] = value;\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar defineProperty = __webpack_require__(11);\n\t\n\tmodule.exports = function(bound) {\n\t  defineProperty(this, '$$boundTo', bound);\n\t  return this;\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\t\n\tmodule.exports = function() {\n\t  var args = _.toArray(arguments);\n\t  var method = args.shift();\n\t\n\t  return this.then(function(val) {\n\t    return val[method].apply(val, args);\n\t  });\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newq = __webpack_require__(5);\n\tvar _ = __webpack_require__(2);\n\t\n\tfunction checkErrorsAndPredicates(errorsAndPredicates, err) {\n\t  var any = !errorsAndPredicates.length;\n\t  _.each(errorsAndPredicates, function(test) {\n\t    if (!_.isFunction(test))\n\t      throw new Error('Invalid argument.');\n\t\n\t    if (test instanceof Error || test.prototype instanceof Error) {\n\t      any = any || err instanceof test;\n\t\n\t      return !any;\n\t    }\n\t\n\t    any = any || test(err);\n\t    return !any;\n\t  });\n\t  return any;\n\t}\n\t\n\tmodule.exports = function() {\n\t  var errorsAndPredicates = _.toArray(arguments);\n\t  var callback = errorsAndPredicates.pop();\n\t\n\t  return this.$$catch(function(err) {\n\t    if (!_.isFunction(callback) || !checkErrorsAndPredicates(errorsAndPredicates, err))\n\t      return newq.reject(err);\n\t\n\t    return callback.call(this, err);\n\t  });\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar globals = __webpack_require__(1);\n\t\n\tmodule.exports = function(ms) {\n\t  return this.then(function(val) {\n\t    var def = globals.$defer(this);\n\t    setTimeout(def.resolve, ms, val);\n\t    return def.promise;\n\t  }.bind(this));\n\t};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newQ = __webpack_require__(5);\n\t\n\tmodule.exports = function() {\n\t  return this\n\t    .then.apply(this, arguments)\n\t    .$$catch(function(err) {\n\t      setTimeout(function() {\n\t        throw err;\n\t      });\n\t    })\n\t    .$$finally(function() {\n\t      return newQ.reject(new Error('Do not chain anything after calling done()!'));\n\t    })\n\t  ;\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function(prop) {\n\t  return this.then(function(val) {\n\t    return val[prop];\n\t  });\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(cb, options) {\n\t  cb = cb || _.noop;\n\t  options = options || {};\n\t\n\t  return this.then(\n\t    function(args) {\n\t      var a = args;\n\t\n\t      if (!options.spread || !_.isArray(a))\n\t        a = [null, a];\n\t      else\n\t        a = [null].concat(a);\n\t\n\t      cb.apply(this, a);\n\t\n\t      return args;\n\t    },\n\t\n\t    function(err) {\n\t      cb.call(this, err);\n\t      return newq.reject(err);\n\t    }\n\t  );\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\t\n\tmodule.exports = function(val) {\n\t  return this.then(_.constant(val));\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\t\n\tmodule.exports = function(fn) {\n\t  return this.then(function(value) {\n\t    // given value might not be an array\n\t    if (!_.isArray(value))\n\t      value = [value];\n\t\n\t    return fn.apply(this, value);\n\t  });\n\t};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newQ = __webpack_require__(5);\n\t\n\tmodule.exports = function(fn) {\n\t  return this.then(function(value) {\n\t    // returns only when fn(value) promise chain is fully resolved\n\t    return newQ.when(fn.call(this, value)).returns(value);\n\t  });\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar bindMethods = __webpack_require__(10);\n\tvar decorate = __webpack_require__(8);\n\t\n\t// Then is special because it needs the previous then to work\n\tmodule.exports = function() {\n\t  // convert the promise to newQ\n\t  return decorate(this.$$then.apply(this, bindMethods.call(this, arguments)), this);\n\t};\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(err) {\n\t  return this.then(function() {\n\t    return newq.reject(err);\n\t  });\n\t};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar globals = __webpack_require__(1);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(ms, msg) {\n\t  var def = globals.$defer(this);\n\t  var to = setTimeout(function() {\n\t    def.reject(new newq.TimeoutError(msg || 'Timed out after ' + ms + ' ms'));\n\t  }, ms);\n\t\n\t  this\n\t    .then(function(val) {\n\t      def.resolve(val);\n\t    }, function(err) {\n\t      def.reject(err);\n\t    })\n\t    ['finally'](clearTimeout.bind(null, to))\n\t  ;\n\t\n\t  return def.promise;\n\t};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(array) {\n\t  return newq.some(array, 1).get(0);\n\t};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(oThis) {\n\t  return newq.resolve().bind(oThis);\n\t};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar decorate = __webpack_require__(8);\n\tvar globals = __webpack_require__(1);\n\t\n\tglobals.$defer = function $defer(parent) {\n\t  var deferred = globals.$delegate.defer();\n\t  deferred.promise = decorate(deferred.promise, parent);\n\t  return deferred;\n\t};\n\t\n\tmodule.exports = function defer() {\n\t  return globals.$defer();\n\t};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar walkCollection = __webpack_require__(29);\n\t\n\tmodule.exports = walkCollection('tap');\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\tvar Gate = __webpack_require__(30);\n\tvar defineProperty = __webpack_require__(11);\n\t\n\tmodule.exports = function walkCollection(promiseFn) {\n\t  return function(array, cb, options) {\n\t    options = _.pick(options, 'concurrency');\n\t\n\t    var gate = options.concurrency ? new Gate(options) : {\n\t      add: function(fn) {\n\t        return fn();\n\t      }\n\t    };\n\t\n\t    // create an array with each promises affected by the operation\n\t    var $$unsynced = _.map(array, function(val, i) {\n\t      // return a new promise for each item\n\t      return newq.when(val)[promiseFn](function(val) {\n\t        return gate.add(function() {\n\t          // call user callback\n\t          return newq.when(cb.call(null, val, i, array.length));\n\t        });\n\t      });\n\t    });\n\t\n\t    // create a promise synchronizing everything\n\t    var res = newq.all($$unsynced);\n\t\n\t    // save the unsynced array of promises in the result\n\t    defineProperty(res, '$$unsynced', $$unsynced);\n\t\n\t    // return the promise\n\t    return res;\n\t  };\n\t};\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar globals = __webpack_require__(1);\n\t\n\tvar Gate = module.exports = function Gate(options) {\n\t  this.$options = _.defaults(options, {\n\t    concurrency: 1,\n\t    maxQueue: 0\n\t  });\n\t  this.$fns = [];\n\t};\n\t\n\tGate.prototype.add = function(fn) {\n\t  // if (this.$options.maxQueue > 0 && this.$fns.length - this.$options.concurrency >= this.$options.maxQueue)\n\t  //     return def.reject(new Error('Max queue size reached'));\n\t\n\t  var def = globals.$defer();\n\t\n\t  var $fn = function() {\n\t    fn()\n\t      ['finally'](function() {\n\t        this.$fns.splice(this.$fns.indexOf($fn), 1);\n\t\n\t        if (this.$fns.length >= this.$options.concurrency)\n\t          this.$fns[this.$options.concurrency - 1]();\n\t      }.bind(this))\n\t\n\t      .then(function(val) {\n\t        def.resolve(val);\n\t      }, function(err) {\n\t        def.reject(err);\n\t      })\n\t    ;\n\t  }.bind(this);\n\t\n\t  if (this.$fns.push($fn) <= this.$options.concurrency)\n\t    $fn();\n\t\n\t  return def.promise;\n\t};\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(array, cb, options) {\n\t  return newq.map(array, function(val) {\n\t    return newq.props({\n\t      val: val,\n\t      toFilter: cb.apply(null, arguments)\n\t    });\n\t  }, options)\n\t    .then(function(array) {\n\t      return _.map(_.filter(array, 'toFilter'), 'val');\n\t    })\n\t  ;\n\t};\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar walkCollection = __webpack_require__(29);\n\t\n\tmodule.exports = walkCollection('then');\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function join() {\n\t  var args = _.toArray(arguments);\n\t  var cb = args.pop();\n\t  return newq.all(args).spread(cb);\n\t};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar attempt = __webpack_require__(35);\n\t\n\tmodule.exports = function(fn) {\n\t  return function() {\n\t    return attempt(fn, arguments, this);\n\t  };\n\t};\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(fn, args, oThis) {\n\t  try {\n\t    if (!_.isEmpty(args) && !(_.isArray(args) || _.isArguments(args)))\n\t      args = [args];\n\t\n\t    return newq.when(fn.apply(oThis || this, args));\n\t  }\n\t  catch (err) {\n\t    return newq.reject(err);\n\t  }\n\t};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(obj) {\n\t  return newq.all(_.values(obj)).then(function(vals) {\n\t    return _.zipObject(_.keys(obj), vals);\n\t  });\n\t};\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\t\n\tmodule.exports = function(array, cb, initialValue) {\n\t  return _.reduce(array, function(acc, val, i) {\n\t    return newq.join(acc, val, function(acc, val) {\n\t      return cb(acc, val, i, array.length);\n\t    });\n\t  }, newq.resolve(initialValue));\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar autoDecorate = __webpack_require__(39);\n\t\n\tmodule.exports = autoDecorate('reject');\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar decorate = __webpack_require__(8);\n\tvar globals = __webpack_require__(1);\n\t\n\tmodule.exports = function autoDecorate(name) {\n\t  return !(name in globals.$delegate) ? null : function() {\n\t    return decorate(globals.$delegate[name].apply(globals.$delegate, arguments));\n\t  };\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar newq = __webpack_require__(5);\n\tvar autoDecorate = __webpack_require__(39);\n\t\n\t// depending Angular's version, $q.resolve might not exist\n\tmodule.exports = autoDecorate('resolve') || function(val) {\n\t  var def = newq.defer();\n\t  def.resolve(val);\n\t  return def.promise;\n\t};\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(2);\n\tvar newq = __webpack_require__(5);\n\tvar AggregateError = __webpack_require__(6).AggregateError;\n\t\n\tmodule.exports = function(array, count) {\n\t  if (array.length < count) {\n\t    return newq.reject(new AggregateError(\n\t      'initial array length (' + array.length + ') > count (' + count + ')'\n\t    ));\n\t  }\n\t\n\t  var rejectedCount = 0;\n\t  var res = [];\n\t  var def = newq.defer();\n\t\n\t  _.each(array, function(elt) {\n\t    newq.when(elt)\n\t      .tap(function(val) {\n\t        if (res === null)\n\t          return;\n\t\n\t        res.push(val);\n\t\n\t        // resolve when we have enough fulfilled elements\n\t        if (res.length >= count) {\n\t          def.resolve(res);\n\t          res = null;\n\t        }\n\t      })\n\t      .$$catch(function() {\n\t        if (res === null)\n\t          return;\n\t\n\t        ++rejectedCount;\n\t\n\t        // reject if objective cannot be fulfilled\n\t        if (array.length - rejectedCount < count) {\n\t          def.reject(new AggregateError(\n\t            'Cannot resolve promise: too many rejections (' + rejectedCount + ')'\n\t          ));\n\t          res = null;\n\t        }\n\t      })\n\t    ;\n\t  });\n\t\n\t  return def.promise;\n\t};\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar autoDecorate = __webpack_require__(39);\n\t\n\tmodule.exports = autoDecorate('when');\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// angular-extend-promises.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2861765e0f0158c719e0","'use strict';\n\nangular.module('angular-extend-promises', [])\n\n  .provider('angularExtendPromises', function() {\n    this.options = {\n      compatibilityAliases: true,\n      disableES5Methods: false\n    };\n\n    this.$get = function() {\n      return this.options;\n    };\n  })\n\n  .config(['$provide', function($provide) {\n    // In test mode, empty the cache before doing anything else\n    if (angular.mock) {\n      for (var key in require.cache) {\n        delete require.cache[key];\n      }\n    }\n\n    $provide.decorator('$q', ['$delegate', 'angularExtendPromises', function($delegate, angularExtendPromises) {\n      var globals = require('./globals');\n\n      globals.$delegate = $delegate;\n      globals.$options = angularExtendPromises;\n\n      return require('./newq');\n    }]);\n  }])\n\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nvar _ = require('./_');\n\n_.extend(module.exports, {\n  $defer: _.noop(),\n  $delegate: {},\n  $options: {}\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/globals.js\n// module id = 1\n// module chunks = 0","'use strict';\n\n/* global _ */\n\ntry {\n  module.exports = require('lodash');\n}\ncatch (e) {\n  module.exports = _;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/_.js\n// module id = 2\n// module chunks = 0","/**\n * @license\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash include=\"constant,defaults,each,extend,filter,isArray,isEmpty,isFunction,isArguments,keys,map,functionsIn,noop,zipObject,pick,reduce,toArray,values\" -o tmp/lodash.js`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.1';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      reLeadingDot = /^\\./,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n  /** Used to compose unicode capture groups. */\n  var rsAstral = '[' + rsAstralRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /** Used for built-in method references. */\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root['__core-js_shared__'];\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? ('Symbol(src)_1.' + uid) : '';\n  }());\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto.toString;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n      getPrototype = overArg(Object.getPrototypeOf, Object),\n      objectCreate = Object.create,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n      symIterator = Symbol ? Symbol.iterator : undefined,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n  var defineProperty = (function() {\n    try {\n      var func = getNative(Object, 'defineProperty');\n      func({}, '', {});\n      return func;\n    } catch (e) {}\n  }());\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object),\n      nativeMax = Math.max,\n      nativeNow = Date.now;\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n\n  /** Used to lookup unminified function names. */\n  var realNames = {};\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a `lodash` object which wraps `value` to enable implicit method\n   * chain sequences. Methods that operate on and return arrays, collections,\n   * and functions can be chained together. Methods that retrieve a single value\n   * or may return a primitive value will automatically end the chain sequence\n   * and return the unwrapped value. Otherwise, the value must be unwrapped\n   * with `_#value`.\n   *\n   * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n   * enabled using `_.chain`.\n   *\n   * The execution of chained methods is lazy, that is, it's deferred until\n   * `_#value` is implicitly or explicitly called.\n   *\n   * Lazy evaluation allows several methods to support shortcut fusion.\n   * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n   * the creation of intermediate arrays and can greatly reduce the number of\n   * iteratee executions. Sections of a chain sequence qualify for shortcut\n   * fusion if the section is applied to an array of at least `200` elements\n   * and any iteratees accept only one argument. The heuristic for whether a\n   * section qualifies for shortcut fusion is subject to change.\n   *\n   * Chaining is supported in custom builds as long as the `_#value` method is\n   * directly or indirectly included in the build.\n   *\n   * In addition to lodash methods, wrappers have `Array` and `String` methods.\n   *\n   * The wrapper `Array` methods are:\n   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n   *\n   * The wrapper `String` methods are:\n   * `replace` and `split`\n   *\n   * The wrapper methods that support shortcut fusion are:\n   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n   *\n   * The chainable wrapper methods are:\n   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n   * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n   * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n   * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n   * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n   * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n   * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n   * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n   * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n   * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n   * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n   * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n   * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n   * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n   * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n   * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n   * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n   * `zipObject`, `zipObjectDeep`, and `zipWith`\n   *\n   * The wrapper methods that are **not** chainable by default are:\n   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n   * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n   * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n   * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n   * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n   * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n   * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n   * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n   * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n   * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n   * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n   * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n   * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n   * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n   * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n   * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n   * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n   * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n   * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n   * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n   * `upperFirst`, `value`, and `words`\n   *\n   * @name _\n   * @constructor\n   * @category Seq\n   * @param {*} value The value to wrap in a `lodash` instance.\n   * @returns {Object} Returns the new `lodash` wrapper instance.\n   * @example\n   *\n   * function square(n) {\n   *   return n * n;\n   * }\n   *\n   * var wrapped = _([1, 2, 3]);\n   *\n   * // Returns an unwrapped value.\n   * wrapped.reduce(_.add);\n   * // => 6\n   *\n   * // Returns a wrapped value.\n   * var squares = wrapped.map(square);\n   *\n   * _.isArray(squares);\n   * // => false\n   *\n   * _.isArray(squares.value());\n   * // => true\n   */\n  function lodash() {\n    // No operation performed.\n  }\n\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} proto The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n  var baseCreate = (function() {\n    function object() {}\n    return function(proto) {\n      if (!isObject(proto)) {\n        return {};\n      }\n      if (objectCreate) {\n        return objectCreate(proto);\n      }\n      object.prototype = proto;\n      var result = new object;\n      object.prototype = undefined;\n      return result;\n    };\n  }());\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n    return this;\n  }\n\n  // Add methods to `Hash`.\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n  }\n\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    return index < 0 ? undefined : data[index][1];\n  }\n\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n    return this;\n  }\n\n  // Add methods to `ListCache`.\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash,\n      'map': new (Map || ListCache),\n      'string': new Hash\n    };\n  }\n\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  }\n\n  // Add methods to `MapCache`.\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n\n    this.__data__ = new MapCache;\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n  }\n\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  }\n\n  // Add methods to `SetCache`.\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n  function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n\n    this.size = data.size;\n    return result;\n  }\n\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n  function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n      data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  }\n\n  // Add methods to `Stack`.\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) &&\n          !(skipIndexes && (\n             // Safari 9 has enumerable `arguments.length` in strict mode.\n             key == 'length' ||\n             // Node.js 0.10 has enumerable non-index properties on buffers.\n             (isBuff && (key == 'offset' || key == 'parent')) ||\n             // PhantomJS 2 has enumerable non-index properties on typed arrays.\n             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n             // Skip index properties.\n             isIndex(key, length)\n          ))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.defaults` to customize its `_.assignIn` use.\n   *\n   * @private\n   * @param {*} objValue The destination value.\n   * @param {*} srcValue The source value.\n   * @param {string} key The key of the property to assign.\n   * @param {Object} object The parent object of `objValue`.\n   * @returns {*} Returns the value to assign.\n   */\n  function assignInDefaults(objValue, srcValue, key, object) {\n    if (objValue === undefined ||\n        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n      return srcValue;\n    }\n    return objValue;\n  }\n\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n        (value === undefined && !(key in object))) {\n      baseAssignValue(object, key, value);\n    }\n  }\n\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.assign` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n  }\n\n  /**\n   * The base implementation of `_.assignIn` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssignIn(object, source) {\n    return object && copyObject(source, keysIn(source), object);\n  }\n\n  /**\n   * The base implementation of `assignValue` and `assignMergeValue` without\n   * value checks.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function baseAssignValue(object, key, value) {\n    if (key == '__proto__' && defineProperty) {\n      defineProperty(object, key, {\n        'configurable': true,\n        'enumerable': true,\n        'value': value,\n        'writable': true\n      });\n    } else {\n      object[key] = value;\n    }\n  }\n\n  /**\n   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n   * traversed objects.\n   *\n   * @private\n   * @param {*} value The value to clone.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Deep clone\n   *  2 - Flatten inherited properties\n   *  4 - Clone symbols\n   * @param {Function} [customizer] The function to customize cloning.\n   * @param {string} [key] The key of `value`.\n   * @param {Object} [object] The parent object of `value`.\n   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n   * @returns {*} Returns the cloned value.\n   */\n  function baseClone(value, bitmask, customizer, key, object, stack) {\n    var result,\n        isDeep = bitmask & CLONE_DEEP_FLAG,\n        isFlat = bitmask & CLONE_FLAT_FLAG,\n        isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n      return result;\n    }\n    if (!isObject(value)) {\n      return value;\n    }\n    var isArr = isArray(value);\n    if (isArr) {\n      result = initCloneArray(value);\n      if (!isDeep) {\n        return copyArray(value, result);\n      }\n    } else {\n      var tag = getTag(value),\n          isFunc = tag == funcTag || tag == genTag;\n\n      if (isBuffer(value)) {\n        return cloneBuffer(value, isDeep);\n      }\n      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n        result = (isFlat || isFunc) ? {} : initCloneObject(value);\n        if (!isDeep) {\n          return isFlat\n            ? copySymbolsIn(value, baseAssignIn(result, value))\n            : copySymbols(value, baseAssign(result, value));\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {};\n        }\n        result = initCloneByTag(value, tag, baseClone, isDeep);\n      }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack);\n    var stacked = stack.get(value);\n    if (stacked) {\n      return stacked;\n    }\n    stack.set(value, result);\n\n    var keysFunc = isFull\n      ? (isFlat ? getAllKeysIn : getAllKeys)\n      : (isFlat ? keysIn : keys);\n\n    var props = isArr ? undefined : keysFunc(value);\n    arrayEach(props || value, function(subValue, key) {\n      if (props) {\n        key = subValue;\n        subValue = value[key];\n      }\n      // Recursively populate clone (susceptible to call stack limits).\n      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n  var baseEach = createBaseEach(baseForOwn);\n\n  /**\n   * The base implementation of `_.filter` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function baseFilter(collection, predicate) {\n    var result = [];\n    baseEach(collection, function(value, index, collection) {\n      if (predicate(value, index, collection)) {\n        result.push(value);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n        length = array.length;\n\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n\n    while (++index < length) {\n      var value = array[index];\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          arrayPush(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n  var baseFor = createBaseFor();\n\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n\n  /**\n   * The base implementation of `_.functions` which creates an array of\n   * `object` function property names filtered from `props`.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Array} props The property names to filter.\n   * @returns {Array} Returns the function names.\n   */\n  function baseFunctions(object, props) {\n    return arrayFilter(props, function(key) {\n      return isFunction(object[key]);\n    });\n  }\n\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n  function baseGet(object, path) {\n    path = castPath(path, object);\n\n    var index = 0,\n        length = path.length;\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n    return (index && index == length) ? object : undefined;\n  }\n\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n    value = Object(value);\n    return (symToStringTag && symToStringTag in value)\n      ? getRawTag(value)\n      : objectToString(value);\n  }\n\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n      return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = arrayTag,\n        othTag = arrayTag;\n\n    if (!objIsArr) {\n      objTag = getTag(object);\n      objTag = objTag == argsTag ? objectTag : objTag;\n    }\n    if (!othIsArr) {\n      othTag = getTag(other);\n      othTag = othTag == argsTag ? objectTag : othTag;\n    }\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n      objIsArr = true;\n      objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack);\n      return (objIsArr || isTypedArray(object))\n        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n\n        stack || (stack = new Stack);\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n    if (!isSameTag) {\n      return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n        length = index,\n        noCustomizer = !customizer;\n\n    if (object == null) {\n      return !length;\n    }\n    object = Object(object);\n    while (index--) {\n      var data = matchData[index];\n      if ((noCustomizer && data[2])\n            ? data[1] !== object[data[0]]\n            : !(data[0] in object)\n          ) {\n        return false;\n      }\n    }\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n          objValue = object[key],\n          srcValue = data[1];\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack;\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n        if (!(result === undefined\n              ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n              : result\n            )) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) &&\n      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value;\n    }\n    if (value == null) {\n      return identity;\n    }\n    if (typeof value == 'object') {\n      return isArray(value)\n        ? baseMatchesProperty(value[0], value[1])\n        : baseMatches(value);\n    }\n    return property(value);\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object);\n    }\n    var isProto = isPrototype(object),\n        result = [];\n\n    for (var key in object) {\n      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.map` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function baseMap(collection, iteratee) {\n    var index = -1,\n        result = isArrayLike(collection) ? Array(collection.length) : [];\n\n    baseEach(collection, function(value, key, collection) {\n      result[++index] = iteratee(value, key, collection);\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n    return function(object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n    return function(object) {\n      var objValue = get(object, path);\n      return (objValue === undefined && objValue === srcValue)\n        ? hasIn(object, path)\n        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n\n  /**\n   * The base implementation of `_.pick` without support for individual\n   * property identifiers.\n   *\n   * @private\n   * @param {Object} object The source object.\n   * @param {string[]} paths The property paths to pick.\n   * @returns {Object} Returns the new object.\n   */\n  function basePick(object, paths) {\n    object = Object(object);\n    return basePickBy(object, paths, function(value, path) {\n      return hasIn(object, path);\n    });\n  }\n\n  /**\n   * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The source object.\n   * @param {string[]} paths The property paths to pick.\n   * @param {Function} predicate The function invoked per property.\n   * @returns {Object} Returns the new object.\n   */\n  function basePickBy(object, paths, predicate) {\n    var index = -1,\n        length = paths.length,\n        result = {};\n\n    while (++index < length) {\n      var path = paths[index],\n          value = baseGet(object, path);\n\n      if (predicate(value, path)) {\n        baseSet(result, path, value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyDeep(path) {\n    return function(object) {\n      return baseGet(object, path);\n    };\n  }\n\n  /**\n   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   */\n  function baseRest(func, start) {\n    return setToString(overRest(func, start, identity), func + '');\n  }\n\n  /**\n   * The base implementation of `_.set`.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {Array|string} path The path of the property to set.\n   * @param {*} value The value to set.\n   * @param {Function} [customizer] The function to customize path creation.\n   * @returns {Object} Returns `object`.\n   */\n  function baseSet(object, path, value, customizer) {\n    if (!isObject(object)) {\n      return object;\n    }\n    path = castPath(path, object);\n\n    var index = -1,\n        length = path.length,\n        lastIndex = length - 1,\n        nested = object;\n\n    while (nested != null && ++index < length) {\n      var key = toKey(path[index]),\n          newValue = value;\n\n      if (index != lastIndex) {\n        var objValue = nested[key];\n        newValue = customizer ? customizer(objValue, key, nested) : undefined;\n        if (newValue === undefined) {\n          newValue = isObject(objValue)\n            ? objValue\n            : (isIndex(path[index + 1]) ? [] : {});\n        }\n      }\n      assignValue(nested, key, newValue);\n      nested = nested[key];\n    }\n    return object;\n  }\n\n  /**\n   * The base implementation of `setToString` without support for hot loop shorting.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var baseSetToString = !defineProperty ? identity : function(func, string) {\n    return defineProperty(func, 'toString', {\n      'configurable': true,\n      'enumerable': false,\n      'value': constant(string),\n      'writable': true\n    });\n  };\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = (value + '');\n    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n  }\n\n  /**\n   * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n   *\n   * @private\n   * @param {Array} props The property identifiers.\n   * @param {Array} values The property values.\n   * @param {Function} assignFunc The function to assign values.\n   * @returns {Object} Returns the new object.\n   */\n  function baseZipObject(props, values, assignFunc) {\n    var index = -1,\n        length = props.length,\n        valsLength = values.length,\n        result = {};\n\n    while (++index < length) {\n      var value = index < valsLength ? values[index] : undefined;\n      assignFunc(result, props[index], value);\n    }\n    return result;\n  }\n\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n  function castPath(value, object) {\n    if (isArray(value)) {\n      return value;\n    }\n    return isKey(value, object) ? [value] : stringToPath(toString(value));\n  }\n\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n    var length = buffer.length,\n        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n    buffer.copy(result);\n    return result;\n  }\n\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n  }\n\n  /**\n   * Creates a clone of `dataView`.\n   *\n   * @private\n   * @param {Object} dataView The data view to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned data view.\n   */\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n  }\n\n  /**\n   * Creates a clone of `map`.\n   *\n   * @private\n   * @param {Object} map The map to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned map.\n   */\n  function cloneMap(map, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n    return arrayReduce(array, addMapEntry, new map.constructor);\n  }\n\n  /**\n   * Creates a clone of `regexp`.\n   *\n   * @private\n   * @param {Object} regexp The regexp to clone.\n   * @returns {Object} Returns the cloned regexp.\n   */\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n  }\n\n  /**\n   * Creates a clone of `set`.\n   *\n   * @private\n   * @param {Object} set The set to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned set.\n   */\n  function cloneSet(set, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n    return arrayReduce(array, addSetEntry, new set.constructor);\n  }\n\n  /**\n   * Creates a clone of the `symbol` object.\n   *\n   * @private\n   * @param {Object} symbol The symbol object to clone.\n   * @returns {Object} Returns the cloned symbol object.\n   */\n  function cloneSymbol(symbol) {\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n  }\n\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function copyArray(source, array) {\n    var index = -1,\n        length = source.length;\n\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n\n    var index = -1,\n        length = props.length;\n\n    while (++index < length) {\n      var key = props[index];\n\n      var newValue = customizer\n        ? customizer(object[key], source[key], key, object, source)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = source[key];\n      }\n      if (isNew) {\n        baseAssignValue(object, key, newValue);\n      } else {\n        assignValue(object, key, newValue);\n      }\n    }\n    return object;\n  }\n\n  /**\n   * Copies own symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols(source), object);\n  }\n\n  /**\n   * Copies own and inherited symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbolsIn(source, object) {\n    return copyObject(source, getSymbolsIn(source), object);\n  }\n\n  /**\n   * Creates a function like `_.assign`.\n   *\n   * @private\n   * @param {Function} assigner The function to assign values.\n   * @returns {Function} Returns the new assigner function.\n   */\n  function createAssigner(assigner) {\n    return baseRest(function(object, sources) {\n      var index = -1,\n          length = sources.length,\n          customizer = length > 1 ? sources[length - 1] : undefined,\n          guard = length > 2 ? sources[2] : undefined;\n\n      customizer = (assigner.length > 3 && typeof customizer == 'function')\n        ? (length--, customizer)\n        : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? undefined : customizer;\n        length = 1;\n      }\n      object = Object(object);\n      while (++index < length) {\n        var source = sources[index];\n        if (source) {\n          assigner(object, source, index, customizer);\n        }\n      }\n      return object;\n    });\n  }\n\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseEach(eachFunc, fromRight) {\n    return function(collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n      var length = collection.length,\n          index = fromRight ? length : -1,\n          iterable = Object(collection);\n\n      while ((fromRight ? index-- : ++index < length)) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n      return collection;\n    };\n  }\n\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseFor(fromRight) {\n    return function(object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n      return object;\n    };\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(array);\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n    var index = -1,\n        result = true,\n        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n    stack.set(array, other);\n    stack.set(other, array);\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, arrValue, index, other, array, stack)\n          : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (!arraySome(other, function(othValue, othIndex) {\n              if (!cacheHas(seen, othIndex) &&\n                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                return seen.push(othIndex);\n              }\n            })) {\n          result = false;\n          break;\n        }\n      } else if (!(\n            arrValue === othValue ||\n              equalFunc(arrValue, othValue, bitmask, customizer, stack)\n          )) {\n        result = false;\n        break;\n      }\n    }\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if ((object.byteLength != other.byteLength) ||\n            (object.byteOffset != other.byteOffset)) {\n          return false;\n        }\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if ((object.byteLength != other.byteLength) ||\n            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == (other + '');\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG;\n\n        // Recursively compare objects (susceptible to call stack limits).\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = keys(object),\n        objLength = objProps.length,\n        othProps = keys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n    var index = objLength;\n    while (index--) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(object);\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n\n    var skipCtor = isPartial;\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, objValue, key, other, object, stack)\n          : customizer(objValue, othValue, key, object, other, stack);\n      }\n      // Recursively compare objects (susceptible to call stack limits).\n      if (!(compared === undefined\n            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n            : compared\n          )) {\n        result = false;\n        break;\n      }\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor;\n\n      // Non `Object` object instances with different constructors are not equal.\n      if (objCtor != othCtor &&\n          ('constructor' in object && 'constructor' in other) &&\n          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n            typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n\n  /**\n   * A specialized version of `baseRest` which flattens the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @returns {Function} Returns the new function.\n   */\n  function flatRest(func) {\n    return setToString(overRest(func, undefined, flatten), func + '');\n  }\n\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n\n  /**\n   * Creates an array of own and inherited enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeysIn(object) {\n    return baseGetAllKeys(object, keysIn, getSymbolsIn);\n  }\n\n  /**\n   * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n   * this function returns the custom method, otherwise it returns `baseIteratee`.\n   * If arguments are provided, the chosen function is invoked with them and\n   * its result is returned.\n   *\n   * @private\n   * @param {*} [value] The value to convert to an iteratee.\n   * @param {number} [arity] The arity of the created iteratee.\n   * @returns {Function} Returns the chosen function or its result.\n   */\n  function getIteratee() {\n    var result = lodash.iteratee || iteratee;\n    result = result === iteratee ? baseIteratee : result;\n    return arguments.length ? result(arguments[0], arguments[1]) : result;\n  }\n\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key)\n      ? data[typeof key == 'string' ? 'string' : 'hash']\n      : data.map;\n  }\n\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n  function getMatchData(object) {\n    var result = keys(object),\n        length = result.length;\n\n    while (length--) {\n      var key = result[length],\n          value = object[key];\n\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n    return result;\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n  /**\n   * Creates an array of the own and inherited enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n    var result = [];\n    while (object) {\n      arrayPush(result, getSymbols(object));\n      object = getPrototype(object);\n    }\n    return result;\n  };\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag;\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n      (Map && getTag(new Map) != mapTag) ||\n      (Promise && getTag(Promise.resolve()) != promiseTag) ||\n      (Set && getTag(new Set) != setTag) ||\n      (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n    getTag = function(value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString: return dataViewTag;\n          case mapCtorString: return mapTag;\n          case promiseCtorString: return promiseTag;\n          case setCtorString: return setTag;\n          case weakMapCtorString: return weakMapTag;\n        }\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n\n    var index = -1,\n        length = path.length,\n        result = false;\n\n    while (++index < length) {\n      var key = toKey(path[index]);\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n      object = object[key];\n    }\n    if (result || ++index != length) {\n      return result;\n    }\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) &&\n      (isArray(object) || isArguments(object));\n  }\n\n  /**\n   * Initializes an array clone.\n   *\n   * @private\n   * @param {Array} array The array to clone.\n   * @returns {Array} Returns the initialized clone.\n   */\n  function initCloneArray(array) {\n    var length = array.length,\n        result = array.constructor(length);\n\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n      result.index = array.index;\n      result.input = array.input;\n    }\n    return result;\n  }\n\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneObject(object) {\n    return (typeof object.constructor == 'function' && !isPrototype(object))\n      ? baseCreate(getPrototype(object))\n      : {};\n  }\n\n  /**\n   * Initializes an object clone based on its `toStringTag`.\n   *\n   * **Note:** This function only supports cloning values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {string} tag The `toStringTag` of the object to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneByTag(object, tag, cloneFunc, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n      case arrayBufferTag:\n        return cloneArrayBuffer(object);\n\n      case boolTag:\n      case dateTag:\n        return new Ctor(+object);\n\n      case dataViewTag:\n        return cloneDataView(object, isDeep);\n\n      case float32Tag: case float64Tag:\n      case int8Tag: case int16Tag: case int32Tag:\n      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n        return cloneTypedArray(object, isDeep);\n\n      case mapTag:\n        return cloneMap(object, isDeep, cloneFunc);\n\n      case numberTag:\n      case stringTag:\n        return new Ctor(object);\n\n      case regexpTag:\n        return cloneRegExp(object);\n\n      case setTag:\n        return cloneSet(object, isDeep, cloneFunc);\n\n      case symbolTag:\n        return cloneSymbol(object);\n    }\n  }\n\n  /**\n   * Checks if `value` is a flattenable `arguments` object or array.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n   */\n  function isFlattenable(value) {\n    return isArray(value) || isArguments(value) ||\n      !!(spreadableSymbol && value && value[spreadableSymbol]);\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n    var type = typeof index;\n    if (type == 'number'\n          ? (isArrayLike(object) && isIndex(index, object.length))\n          : (type == 'string' && index in object)\n        ) {\n      return eq(object[index], value);\n    }\n    return false;\n  }\n\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n  function isKey(value, object) {\n    if (isArray(value)) {\n      return false;\n    }\n    var type = typeof value;\n    if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n        value == null || isSymbol(value)) {\n      return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n      (object != null && value in Object(object));\n  }\n\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n  function isKeyable(value) {\n    var type = typeof value;\n    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n      ? (value !== '__proto__')\n      : (value === null);\n  }\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n    return value === proto;\n  }\n\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function matchesStrictComparable(key, srcValue) {\n    return function(object) {\n      if (object == null) {\n        return false;\n      }\n      return object[key] === srcValue &&\n        (srcValue !== undefined || (key in Object(object)));\n    };\n  }\n\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n  function memoizeCapped(func) {\n    var result = memoize(func, function(key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n      return key;\n    });\n\n    var cache = result.cache;\n    return result;\n  }\n\n  /**\n   * This function is like\n   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * except that it includes inherited enumerable properties.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function nativeKeysIn(object) {\n    var result = [];\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n\n  /**\n   * A specialized version of `baseRest` which transforms the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @param {Function} transform The rest array transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overRest(func, start, transform) {\n    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n    return function() {\n      var args = arguments,\n          index = -1,\n          length = nativeMax(args.length - start, 0),\n          array = Array(length);\n\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n      index = -1;\n      var otherArgs = Array(start + 1);\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n      otherArgs[start] = transform(array);\n      return apply(func, this, otherArgs);\n    };\n  }\n\n  /**\n   * Sets the `toString` method of `func` to return `string`.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var setToString = shortOut(baseSetToString);\n\n  /**\n   * Creates a function that'll short out and invoke `identity` instead\n   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n   * milliseconds.\n   *\n   * @private\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new shortable function.\n   */\n  function shortOut(func) {\n    var count = 0,\n        lastCalled = 0;\n\n    return function() {\n      var stamp = nativeNow(),\n          remaining = HOT_SPAN - (stamp - lastCalled);\n\n      lastCalled = stamp;\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0];\n        }\n      } else {\n        count = 0;\n      }\n      return func.apply(undefined, arguments);\n    };\n  }\n\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n  var stringToPath = memoizeCapped(function(string) {\n    var result = [];\n    if (reLeadingDot.test(string)) {\n      result.push('');\n    }\n    string.replace(rePropName, function(match, number, quote, string) {\n      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n    });\n    return result;\n  });\n\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value;\n    }\n    var result = (value + '');\n    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n  }\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n      try {\n        return (func + '');\n      } catch (e) {}\n    }\n    return '';\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Flattens `array` a single level deep.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to flatten.\n   * @returns {Array} Returns the new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2, [3, [4]], 5]]);\n   * // => [1, 2, [3, [4]], 5]\n   */\n  function flatten(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? baseFlatten(array, 1) : [];\n  }\n\n  /**\n   * This method is like `_.fromPairs` except that it accepts two arrays,\n   * one of property identifiers and one of corresponding values.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.4.0\n   * @category Array\n   * @param {Array} [props=[]] The property identifiers.\n   * @param {Array} [values=[]] The property values.\n   * @returns {Object} Returns the new object.\n   * @example\n   *\n   * _.zipObject(['a', 'b'], [1, 2]);\n   * // => { 'a': 1, 'b': 2 }\n   */\n  function zipObject(props, values) {\n    return baseZipObject(props || [], values || [], assignValue);\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Iterates over elements of `collection`, returning an array of all elements\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * **Note:** Unlike `_.remove`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.reject\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': true },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * _.filter(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.filter(users, { 'age': 36, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.filter(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.filter(users, 'active');\n   * // => objects for ['barney']\n   */\n  function filter(collection, predicate) {\n    var func = isArray(collection) ? arrayFilter : baseFilter;\n    return func(collection, getIteratee(predicate, 3));\n  }\n\n  /**\n   * Iterates over elements of `collection` and invokes `iteratee` for each element.\n   * The iteratee is invoked with three arguments: (value, index|key, collection).\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n   * property are iterated like arrays. To avoid this behavior use `_.forIn`\n   * or `_.forOwn` for object iteration.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias each\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   * @see _.forEachRight\n   * @example\n   *\n   * _.forEach([1, 2], function(value) {\n   *   console.log(value);\n   * });\n   * // => Logs `1` then `2`.\n   *\n   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n   *   console.log(key);\n   * });\n   * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n   */\n  function forEach(collection, iteratee) {\n    var func = isArray(collection) ? arrayEach : baseEach;\n    return func(collection, getIteratee(iteratee, 3));\n  }\n\n  /**\n   * Creates an array of values by running each element in `collection` thru\n   * `iteratee`. The iteratee is invoked with three arguments:\n   * (value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n   *\n   * The guarded methods are:\n   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   * @example\n   *\n   * function square(n) {\n   *   return n * n;\n   * }\n   *\n   * _.map([4, 8], square);\n   * // => [16, 64]\n   *\n   * _.map({ 'a': 4, 'b': 8 }, square);\n   * // => [16, 64] (iteration order is not guaranteed)\n   *\n   * var users = [\n   *   { 'user': 'barney' },\n   *   { 'user': 'fred' }\n   * ];\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.map(users, 'user');\n   * // => ['barney', 'fred']\n   */\n  function map(collection, iteratee) {\n    var func = isArray(collection) ? arrayMap : baseMap;\n    return func(collection, getIteratee(iteratee, 3));\n  }\n\n  /**\n   * Reduces `collection` to a value which is the accumulated result of running\n   * each element in `collection` thru `iteratee`, where each successive\n   * invocation is supplied the return value of the previous. If `accumulator`\n   * is not given, the first element of `collection` is used as the initial\n   * value. The iteratee is invoked with four arguments:\n   * (accumulator, value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.reduce`, `_.reduceRight`, and `_.transform`.\n   *\n   * The guarded methods are:\n   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n   * and `sortBy`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @returns {*} Returns the accumulated value.\n   * @see _.reduceRight\n   * @example\n   *\n   * _.reduce([1, 2], function(sum, n) {\n   *   return sum + n;\n   * }, 0);\n   * // => 3\n   *\n   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n   *   (result[value] || (result[value] = [])).push(key);\n   *   return result;\n   * }, {});\n   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n   */\n  function reduce(collection, iteratee, accumulator) {\n    var func = isArray(collection) ? arrayReduce : baseReduce,\n        initAccum = arguments.length < 3;\n\n    return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    var memoized = function() {\n      var args = arguments,\n          key = resolver ? resolver.apply(this, args) : args[0],\n          cache = memoized.cache;\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n    memoized.cache = new (memoize.Cache || MapCache);\n    return memoized;\n  }\n\n  // Expose `MapCache`.\n  memoize.Cache = MapCache;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other);\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n      !propertyIsEnumerable.call(value, 'callee');\n  };\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n  var isBuffer = nativeIsBuffer || stubFalse;\n\n  /**\n   * Checks if `value` is an empty object, collection, map, or set.\n   *\n   * Objects are considered empty if they have no own enumerable string keyed\n   * properties.\n   *\n   * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n   * jQuery-like collections are considered empty if they have a `length` of `0`.\n   * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty(null);\n   * // => true\n   *\n   * _.isEmpty(true);\n   * // => true\n   *\n   * _.isEmpty(1);\n   * // => true\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({ 'a': 1 });\n   * // => false\n   */\n  function isEmpty(value) {\n    if (value == null) {\n      return true;\n    }\n    if (isArrayLike(value) &&\n        (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n          isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n      return !value.length;\n    }\n    var tag = getTag(value);\n    if (tag == mapTag || tag == setTag) {\n      return !value.size;\n    }\n    if (isPrototype(value)) {\n      return !baseKeys(value).length;\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString(value) {\n    return typeof value == 'string' ||\n      (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike(value) && baseGetTag(value) == symbolTag);\n  }\n\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n  /**\n   * Converts `value` to an array.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {Array} Returns the converted array.\n   * @example\n   *\n   * _.toArray({ 'a': 1, 'b': 2 });\n   * // => [1, 2]\n   *\n   * _.toArray('abc');\n   * // => ['a', 'b', 'c']\n   *\n   * _.toArray(1);\n   * // => []\n   *\n   * _.toArray(null);\n   * // => []\n   */\n  function toArray(value) {\n    if (!value) {\n      return [];\n    }\n    if (isArrayLike(value)) {\n      return isString(value) ? stringToArray(value) : copyArray(value);\n    }\n    if (symIterator && value[symIterator]) {\n      return iteratorToArray(value[symIterator]());\n    }\n    var tag = getTag(value),\n        func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n    return func(value);\n  }\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * This method is like `_.assign` except that it iterates over own and\n   * inherited source properties.\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @alias extend\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.assign\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   * }\n   *\n   * function Bar() {\n   *   this.c = 3;\n   * }\n   *\n   * Foo.prototype.b = 2;\n   * Bar.prototype.d = 4;\n   *\n   * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n   */\n  var assignIn = createAssigner(function(object, source) {\n    copyObject(source, keysIn(source), object);\n  });\n\n  /**\n   * This method is like `_.assignIn` except that it accepts `customizer`\n   * which is invoked to produce the assigned values. If `customizer` returns\n   * `undefined`, assignment is handled by the method instead. The `customizer`\n   * is invoked with five arguments: (objValue, srcValue, key, object, source).\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @alias extendWith\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} sources The source objects.\n   * @param {Function} [customizer] The function to customize assigned values.\n   * @returns {Object} Returns `object`.\n   * @see _.assignWith\n   * @example\n   *\n   * function customizer(objValue, srcValue) {\n   *   return _.isUndefined(objValue) ? srcValue : objValue;\n   * }\n   *\n   * var defaults = _.partialRight(_.assignInWith, customizer);\n   *\n   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n   * // => { 'a': 1, 'b': 2 }\n   */\n  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n    copyObject(source, keysIn(source), object, customizer);\n  });\n\n  /**\n   * Assigns own and inherited enumerable string keyed properties of source\n   * objects to the destination object for all destination properties that\n   * resolve to `undefined`. Source objects are applied from left to right.\n   * Once a property is set, additional values of the same property are ignored.\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.defaultsDeep\n   * @example\n   *\n   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n   * // => { 'a': 1, 'b': 2 }\n   */\n  var defaults = baseRest(function(args) {\n    args.push(undefined, assignInDefaults);\n    return apply(assignInWith, undefined, args);\n  });\n\n  /**\n   * Creates an array of function property names from own and inherited\n   * enumerable properties of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns the function names.\n   * @see _.functions\n   * @example\n   *\n   * function Foo() {\n   *   this.a = _.constant('a');\n   *   this.b = _.constant('b');\n   * }\n   *\n   * Foo.prototype.c = _.constant('c');\n   *\n   * _.functionsIn(new Foo);\n   * // => ['a', 'b', 'c']\n   */\n  function functionsIn(object) {\n    return object == null ? [] : baseFunctions(object, keysIn(object));\n  }\n\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path);\n    return result === undefined ? defaultValue : result;\n  }\n\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  /**\n   * Creates an array of the own and inherited enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keysIn(new Foo);\n   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n   */\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n  }\n\n  /**\n   * Creates an object composed of the picked `object` properties.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The source object.\n   * @param {...(string|string[])} [paths] The property paths to pick.\n   * @returns {Object} Returns the new object.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': '2', 'c': 3 };\n   *\n   * _.pick(object, ['a', 'c']);\n   * // => { 'a': 1, 'c': 3 }\n   */\n  var pick = flatRest(function(object, paths) {\n    return object == null ? {} : basePick(object, paths);\n  });\n\n  /**\n   * Creates an array of the own enumerable string keyed property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return object == null ? [] : baseValues(object, keys(object));\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n  function constant(value) {\n    return function() {\n      return value;\n    };\n  }\n\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Creates a function that invokes `func` with the arguments of the created\n   * function. If `func` is a property name, the created function returns the\n   * property value for a given element. If `func` is an array or object, the\n   * created function returns `true` for elements that contain the equivalent\n   * source properties, otherwise it returns `false`.\n   *\n   * @static\n   * @since 4.0.0\n   * @memberOf _\n   * @category Util\n   * @param {*} [func=_.identity] The value to convert to a callback.\n   * @returns {Function} Returns the callback.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': true },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n   * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.filter(users, _.iteratee(['user', 'fred']));\n   * // => [{ 'user': 'fred', 'age': 40 }]\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.map(users, _.iteratee('user'));\n   * // => ['barney', 'fred']\n   *\n   * // Create custom iteratee shorthands.\n   * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n   *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n   *     return func.test(string);\n   *   };\n   * });\n   *\n   * _.filter(['abc', 'def'], /ef/);\n   * // => ['def']\n   */\n  function iteratee(func) {\n    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n  }\n\n  /**\n   * This method returns `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.3.0\n   * @category Util\n   * @example\n   *\n   * _.times(2, _.noop);\n   * // => [undefined, undefined]\n   */\n  function noop() {\n    // No operation performed.\n  }\n\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n  function stubArray() {\n    return [];\n  }\n\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n  function stubFalse() {\n    return false;\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  // Add methods that return wrapped values in chain sequences.\n  lodash.assignIn = assignIn;\n  lodash.assignInWith = assignInWith;\n  lodash.constant = constant;\n  lodash.defaults = defaults;\n  lodash.filter = filter;\n  lodash.flatten = flatten;\n  lodash.functionsIn = functionsIn;\n  lodash.iteratee = iteratee;\n  lodash.keys = keys;\n  lodash.keysIn = keysIn;\n  lodash.map = map;\n  lodash.memoize = memoize;\n  lodash.pick = pick;\n  lodash.property = property;\n  lodash.toArray = toArray;\n  lodash.values = values;\n  lodash.zipObject = zipObject;\n\n  // Add aliases.\n  lodash.extend = assignIn;\n  lodash.extendWith = assignInWith;\n\n  /*------------------------------------------------------------------------*/\n\n  // Add methods that return unwrapped values in chain sequences.\n  lodash.eq = eq;\n  lodash.forEach = forEach;\n  lodash.get = get;\n  lodash.hasIn = hasIn;\n  lodash.identity = identity;\n  lodash.isArguments = isArguments;\n  lodash.isArray = isArray;\n  lodash.isArrayLike = isArrayLike;\n  lodash.isBuffer = isBuffer;\n  lodash.isEmpty = isEmpty;\n  lodash.isFunction = isFunction;\n  lodash.isLength = isLength;\n  lodash.isObject = isObject;\n  lodash.isObjectLike = isObjectLike;\n  lodash.isString = isString;\n  lodash.isSymbol = isSymbol;\n  lodash.isTypedArray = isTypedArray;\n  lodash.stubArray = stubArray;\n  lodash.stubFalse = stubFalse;\n  lodash.noop = noop;\n  lodash.reduce = reduce;\n  lodash.toString = toString;\n\n  // Add aliases.\n  lodash.each = forEach;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * The semantic version number.\n   *\n   * @static\n   * @memberOf _\n   * @type {string}\n   */\n  lodash.VERSION = VERSION;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = lodash;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return lodash;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = lodash)._ = lodash;\n    // Export for CommonJS support.\n    freeExports._ = lodash;\n  }\n  else {\n    // Export to the global object.\n    root._ = lodash;\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tmp/lodash.js\n// module id = 3\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar globals = require('../globals');\nvar errors = require('./errors');\n\nvar newq = module.exports = function(resolver) {\n  if (!_.isFunction(resolver))\n    throw new Error('resolver should be a function');\n\n  var deferred = newq.defer();\n  try {\n    resolver(deferred.resolve, deferred.reject);\n  }\n  catch (e) {\n    deferred.reject(e);\n  }\n  return deferred.promise;\n};\n\n_.extend(newq, {\n  // Methods & aliases\n  all: require('./all'),\n  any: require('./any'),\n  bind: require('./bind'),\n  defer: require('./defer'),\n  each: require('./each'),\n  filter: require('./filter'),\n  map: require('./map'),\n  join: require('./join'),\n  method: require('./method'),\n  props: require('./props'),\n  reduce: require('./reduce'),\n  reject: require('./reject'),\n  resolve: require('./resolve'),\n  some: require('./some'),\n  when: require('./when'),\n\n  // Errors\n  AggregateError: errors.AggregateError,\n  TimeoutError: errors.TimeoutError\n});\n\nif (globals.$options.compatibilityAliases) {\n  _.extend(newq, {\n    attempt: require('./try')\n  });\n}\n\nif (!globals.$options.disableES5Methods) {\n  _.extend(newq, {\n    'try': require('./try')\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/index.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nvar NewQError = module.exports.NewQError = function NewQError(message) {\n  this.name = this.constructor.name;\n  Error.apply(this, arguments);\n  this.message = message;\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, this.constructor);\n  else\n    this.stack = (new Error()).stack;\n};\n\nNewQError.prototype.toString = function() {\n    return this.stack.toString();\n};\n\nNewQError.subError = function subError(SubError, Parent) {\n  Parent = Parent || NewQError;\n\n  function F() {}\n  F.prototype = Parent.prototype;\n  SubError.prototype = new F();\n  SubError.prototype.constructor = SubError;\n\n  if (SubError.subError)\n    return;\n\n  SubError.subError = function subError(SubSubError) {\n    NewQError.subError(SubSubError, SubError);\n  };\n};\n\nNewQError.subError(NewQError, Error);\n\nvar AggregateError = module.exports.AggregateError = function AggregateError() {\n  NewQError.apply(this, arguments);\n};\nNewQError.subError(AggregateError);\n\nvar TimeoutError = module.exports.TimeoutError = function TimeoutError() {\n  NewQError.apply(this, arguments);\n};\nNewQError.subError(TimeoutError);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/errors.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar decorate = require('../promise/decorate');\nvar globals = require('../globals');\nvar newq = require('./');\n\nmodule.exports = function(promises) {\n  if (!_.isArray(promises))\n    return newq.props(promises);\n\n  promises = _.map(promises, function(promise) {\n    return newq.when(promise);\n  });\n\n  return decorate(globals.$delegate.all(promises));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/all.js\n// module id = 7\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar globals = require('../globals');\nvar callNewQ = require('./callNewQ');\nvar defineProperty = require('../defineProperty');\n\nvar aliases = {\n  'catch': 'caught',\n  'finally': 'lastly',\n  'return': ['thenReturn', 'returns'],\n  'throw': ['thenThrow']\n};\n\nfunction Promise($qPromise, parent) {\n  defineProperty(this, '$$state', $qPromise.$$state);\n\n  _.each(_.functionsIn($qPromise), function(name) {\n    defineProperty(this, '$$' + name, $qPromise[name]);\n  }.bind(this));\n\n  if (parent && parent.$$boundTo)\n    defineProperty(this, '$$boundTo', parent.$$boundTo);\n\n  defineProperty(this, '$$arrayListeners', []);\n\n  this.then = $qPromise.then = this.then.bind(this);\n}\n\nmodule.exports = function decorate($qPromise, parent) {\n  return new Promise($qPromise, parent);\n};\n\nPromise.prototype = {\n  // call newQ.all if unsynced, does nothing otherwise\n  all: callNewQ('all'),\n  any: callNewQ('any'),\n  bind: require('./bind'),\n  call: require('./call'),\n  'catch': require('./catch'),\n  delay: require('./delay'),\n  done: require('./done'),\n  each: callNewQ('each'),\n  filter: callNewQ('filter'),\n  'finally': function() {\n    return this.$$finally.apply(this, arguments);\n  },\n  get: require('./get'),\n  map: callNewQ('map'),\n  nodeify: require('./nodeify'),\n  props: callNewQ('props'),\n  reduce: callNewQ('reduce'),\n  'return': require('./return'),\n  some: callNewQ('some'),\n  spread: require('./spread'),\n  tap: require('./tap'),\n  then: require('./then'),\n  'throw': require('./throw'),\n  timeout: require('./timeout'),\n\n  constructor: Promise\n};\n\ndefineProperty(Promise.prototype, '$$callArrayListeners', function(array) {\n  _.each(this.$$arrayListeners, function(listener) {\n    listener(array);\n  });\n});\n\n_.each(aliases, function(targets, method) {\n  if (!_.isArray(targets))\n    targets = [targets];\n\n  if (globals.$options.compatibilityAliases) {\n    _.each(targets, function(target) {\n      Promise.prototype[target] = Promise.prototype[method];\n    });\n  }\n\n  if (globals.$options.disableES5Methods)\n    delete Promise.prototype[method];\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/decorate.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nvar bindMethods = require('./bindMethods');\nvar newQ = require('../newq');\nvar defineProperty = require('../defineProperty');\n\nmodule.exports = function callNewQ(method) {\n  /* jshint -W040 */\n  function execute(args, arr) {\n    var res = newQ[method].apply(null, [arr].concat(args));\n    defineProperty(res, '$$boundTo', this.$$boundTo);\n    return res;\n  }\n  /* jshint +W040 */\n\n  return function() {\n    var args = bindMethods.call(this, arguments);\n\n    // chain if not synced\n    if (this.$$unsynced) {\n      // create new promise with next($$unsynced, args…)\n      return execute.call(this, args, this.$$unsynced);\n    }\n\n    var then = this.then(function(val) {\n      if (then.$$promiseResult)\n        return then.$$promiseResult;\n\n      var res = execute.call(this, args, val);\n\n      if (then.$$arrayListeners.length && res.$$unsynced)\n        then.$$callArrayListeners(res.$$unsynced);\n\n      return res;\n    }.bind(this));\n\n    this.$$arrayListeners.push(function(array) {\n      defineProperty(this, '$$promiseResult', execute.call(this, args, array));\n\n      if (then.$$arrayListeners.length && this.$$promiseResult.$$unsynced)\n        then.$$callArrayListeners(this.$$promiseResult.$$unsynced);\n    }.bind(this));\n\n    return then;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/callNewQ.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\n\nmodule.exports = function bindMethods(array) {\n  return _.map(array, function(arg) {\n    if (!_.isFunction(arg))\n      return arg;\n    return arg.bind(this.$$boundTo || this);\n  }.bind(this));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/bindMethods.js\n// module id = 10\n// module chunks = 0","'use strict';\n\nmodule.exports = function defineProperty(obj, name, value) {\n  if (Object.defineProperty) {\n    try {\n      Object.defineProperty(obj, name, {\n        value: value\n      });\n    }\n    catch (e) {}\n  }\n\n  if (obj[name] !== value)\n    obj[name] = value;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/defineProperty.js\n// module id = 11\n// module chunks = 0","'use strict';\n\nvar defineProperty = require('../defineProperty');\n\nmodule.exports = function(bound) {\n  defineProperty(this, '$$boundTo', bound);\n  return this;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/bind.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\n\nmodule.exports = function() {\n  var args = _.toArray(arguments);\n  var method = args.shift();\n\n  return this.then(function(val) {\n    return val[method].apply(val, args);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/call.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nvar newq = require('../newq');\nvar _ = require('../_');\n\nfunction checkErrorsAndPredicates(errorsAndPredicates, err) {\n  var any = !errorsAndPredicates.length;\n  _.each(errorsAndPredicates, function(test) {\n    if (!_.isFunction(test))\n      throw new Error('Invalid argument.');\n\n    if (test instanceof Error || test.prototype instanceof Error) {\n      any = any || err instanceof test;\n\n      return !any;\n    }\n\n    any = any || test(err);\n    return !any;\n  });\n  return any;\n}\n\nmodule.exports = function() {\n  var errorsAndPredicates = _.toArray(arguments);\n  var callback = errorsAndPredicates.pop();\n\n  return this.$$catch(function(err) {\n    if (!_.isFunction(callback) || !checkErrorsAndPredicates(errorsAndPredicates, err))\n      return newq.reject(err);\n\n    return callback.call(this, err);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/catch.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = function(ms) {\n  return this.then(function(val) {\n    var def = globals.$defer(this);\n    setTimeout(def.resolve, ms, val);\n    return def.promise;\n  }.bind(this));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/delay.js\n// module id = 15\n// module chunks = 0","'use strict';\n\nvar newQ = require('../newq');\n\nmodule.exports = function() {\n  return this\n    .then.apply(this, arguments)\n    .$$catch(function(err) {\n      setTimeout(function() {\n        throw err;\n      });\n    })\n    .$$finally(function() {\n      return newQ.reject(new Error('Do not chain anything after calling done()!'));\n    })\n  ;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/done.js\n// module id = 16\n// module chunks = 0","'use strict';\n\nmodule.exports = function(prop) {\n  return this.then(function(val) {\n    return val[prop];\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/get.js\n// module id = 17\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('../newq');\n\nmodule.exports = function(cb, options) {\n  cb = cb || _.noop;\n  options = options || {};\n\n  return this.then(\n    function(args) {\n      var a = args;\n\n      if (!options.spread || !_.isArray(a))\n        a = [null, a];\n      else\n        a = [null].concat(a);\n\n      cb.apply(this, a);\n\n      return args;\n    },\n\n    function(err) {\n      cb.call(this, err);\n      return newq.reject(err);\n    }\n  );\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/nodeify.js\n// module id = 18\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\n\nmodule.exports = function(val) {\n  return this.then(_.constant(val));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/return.js\n// module id = 19\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\n\nmodule.exports = function(fn) {\n  return this.then(function(value) {\n    // given value might not be an array\n    if (!_.isArray(value))\n      value = [value];\n\n    return fn.apply(this, value);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/spread.js\n// module id = 20\n// module chunks = 0","'use strict';\n\nvar newQ = require('../newq');\n\nmodule.exports = function(fn) {\n  return this.then(function(value) {\n    // returns only when fn(value) promise chain is fully resolved\n    return newQ.when(fn.call(this, value)).returns(value);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/tap.js\n// module id = 21\n// module chunks = 0","'use strict';\n\nvar bindMethods = require('./bindMethods');\nvar decorate = require('./decorate');\n\n// Then is special because it needs the previous then to work\nmodule.exports = function() {\n  // convert the promise to newQ\n  return decorate(this.$$then.apply(this, bindMethods.call(this, arguments)), this);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/then.js\n// module id = 22\n// module chunks = 0","'use strict';\n\nvar newq = require('../newq');\n\nmodule.exports = function(err) {\n  return this.then(function() {\n    return newq.reject(err);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/throw.js\n// module id = 23\n// module chunks = 0","'use strict';\n\nvar globals = require('../globals');\nvar newq = require('../newq');\n\nmodule.exports = function(ms, msg) {\n  var def = globals.$defer(this);\n  var to = setTimeout(function() {\n    def.reject(new newq.TimeoutError(msg || 'Timed out after ' + ms + ' ms'));\n  }, ms);\n\n  this\n    .then(function(val) {\n      def.resolve(val);\n    }, function(err) {\n      def.reject(err);\n    })\n    ['finally'](clearTimeout.bind(null, to))\n  ;\n\n  return def.promise;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promise/timeout.js\n// module id = 24\n// module chunks = 0","'use strict';\n\nvar newq = require('./');\n\nmodule.exports = function(array) {\n  return newq.some(array, 1).get(0);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/any.js\n// module id = 25\n// module chunks = 0","'use strict';\n\nvar newq = require('./');\n\nmodule.exports = function(oThis) {\n  return newq.resolve().bind(oThis);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/bind.js\n// module id = 26\n// module chunks = 0","'use strict';\n\nvar decorate = require('../promise/decorate');\nvar globals = require('../globals');\n\nglobals.$defer = function $defer(parent) {\n  var deferred = globals.$delegate.defer();\n  deferred.promise = decorate(deferred.promise, parent);\n  return deferred;\n};\n\nmodule.exports = function defer() {\n  return globals.$defer();\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/defer.js\n// module id = 27\n// module chunks = 0","'use strict';\n\nvar walkCollection = require('./walkCollection');\n\nmodule.exports = walkCollection('tap');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/each.js\n// module id = 28\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\nvar Gate = require('./gate');\nvar defineProperty = require('../defineProperty');\n\nmodule.exports = function walkCollection(promiseFn) {\n  return function(array, cb, options) {\n    options = _.pick(options, 'concurrency');\n\n    var gate = options.concurrency ? new Gate(options) : {\n      add: function(fn) {\n        return fn();\n      }\n    };\n\n    // create an array with each promises affected by the operation\n    var $$unsynced = _.map(array, function(val, i) {\n      // return a new promise for each item\n      return newq.when(val)[promiseFn](function(val) {\n        return gate.add(function() {\n          // call user callback\n          return newq.when(cb.call(null, val, i, array.length));\n        });\n      });\n    });\n\n    // create a promise synchronizing everything\n    var res = newq.all($$unsynced);\n\n    // save the unsynced array of promises in the result\n    defineProperty(res, '$$unsynced', $$unsynced);\n\n    // return the promise\n    return res;\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/walkCollection.js\n// module id = 29\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar globals = require('../globals');\n\nvar Gate = module.exports = function Gate(options) {\n  this.$options = _.defaults(options, {\n    concurrency: 1,\n    maxQueue: 0\n  });\n  this.$fns = [];\n};\n\nGate.prototype.add = function(fn) {\n  // if (this.$options.maxQueue > 0 && this.$fns.length - this.$options.concurrency >= this.$options.maxQueue)\n  //     return def.reject(new Error('Max queue size reached'));\n\n  var def = globals.$defer();\n\n  var $fn = function() {\n    fn()\n      ['finally'](function() {\n        this.$fns.splice(this.$fns.indexOf($fn), 1);\n\n        if (this.$fns.length >= this.$options.concurrency)\n          this.$fns[this.$options.concurrency - 1]();\n      }.bind(this))\n\n      .then(function(val) {\n        def.resolve(val);\n      }, function(err) {\n        def.reject(err);\n      })\n    ;\n  }.bind(this);\n\n  if (this.$fns.push($fn) <= this.$options.concurrency)\n    $fn();\n\n  return def.promise;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/gate.js\n// module id = 30\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\n\nmodule.exports = function(array, cb, options) {\n  return newq.map(array, function(val) {\n    return newq.props({\n      val: val,\n      toFilter: cb.apply(null, arguments)\n    });\n  }, options)\n    .then(function(array) {\n      return _.map(_.filter(array, 'toFilter'), 'val');\n    })\n  ;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/filter.js\n// module id = 31\n// module chunks = 0","'use strict';\n\nvar walkCollection = require('./walkCollection');\n\nmodule.exports = walkCollection('then');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/map.js\n// module id = 32\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\n\nmodule.exports = function join() {\n  var args = _.toArray(arguments);\n  var cb = args.pop();\n  return newq.all(args).spread(cb);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/join.js\n// module id = 33\n// module chunks = 0","'use strict';\n\nvar attempt = require('./try');\n\nmodule.exports = function(fn) {\n  return function() {\n    return attempt(fn, arguments, this);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/method.js\n// module id = 34\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\n\nmodule.exports = function(fn, args, oThis) {\n  try {\n    if (!_.isEmpty(args) && !(_.isArray(args) || _.isArguments(args)))\n      args = [args];\n\n    return newq.when(fn.apply(oThis || this, args));\n  }\n  catch (err) {\n    return newq.reject(err);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/try.js\n// module id = 35\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\n\nmodule.exports = function(obj) {\n  return newq.all(_.values(obj)).then(function(vals) {\n    return _.zipObject(_.keys(obj), vals);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/props.js\n// module id = 36\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\n\nmodule.exports = function(array, cb, initialValue) {\n  return _.reduce(array, function(acc, val, i) {\n    return newq.join(acc, val, function(acc, val) {\n      return cb(acc, val, i, array.length);\n    });\n  }, newq.resolve(initialValue));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/reduce.js\n// module id = 37\n// module chunks = 0","'use strict';\n\nvar autoDecorate = require('./autoDecorate');\n\nmodule.exports = autoDecorate('reject');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/reject.js\n// module id = 38\n// module chunks = 0","'use strict';\n\nvar decorate = require('../promise/decorate');\nvar globals = require('../globals');\n\nmodule.exports = function autoDecorate(name) {\n  return !(name in globals.$delegate) ? null : function() {\n    return decorate(globals.$delegate[name].apply(globals.$delegate, arguments));\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/autoDecorate.js\n// module id = 39\n// module chunks = 0","'use strict';\n\nvar newq = require('./');\nvar autoDecorate = require('./autoDecorate');\n\n// depending Angular's version, $q.resolve might not exist\nmodule.exports = autoDecorate('resolve') || function(val) {\n  var def = newq.defer();\n  def.resolve(val);\n  return def.promise;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/resolve.js\n// module id = 40\n// module chunks = 0","'use strict';\n\nvar _ = require('../_');\nvar newq = require('./');\nvar AggregateError = require('./errors').AggregateError;\n\nmodule.exports = function(array, count) {\n  if (array.length < count) {\n    return newq.reject(new AggregateError(\n      'initial array length (' + array.length + ') > count (' + count + ')'\n    ));\n  }\n\n  var rejectedCount = 0;\n  var res = [];\n  var def = newq.defer();\n\n  _.each(array, function(elt) {\n    newq.when(elt)\n      .tap(function(val) {\n        if (res === null)\n          return;\n\n        res.push(val);\n\n        // resolve when we have enough fulfilled elements\n        if (res.length >= count) {\n          def.resolve(res);\n          res = null;\n        }\n      })\n      .$$catch(function() {\n        if (res === null)\n          return;\n\n        ++rejectedCount;\n\n        // reject if objective cannot be fulfilled\n        if (array.length - rejectedCount < count) {\n          def.reject(new AggregateError(\n            'Cannot resolve promise: too many rejections (' + rejectedCount + ')'\n          ));\n          res = null;\n        }\n      })\n    ;\n  });\n\n  return def.promise;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/some.js\n// module id = 41\n// module chunks = 0","'use strict';\n\nvar autoDecorate = require('./autoDecorate');\n\nmodule.exports = autoDecorate('when');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/newq/when.js\n// module id = 42\n// module chunks = 0"],"sourceRoot":""}